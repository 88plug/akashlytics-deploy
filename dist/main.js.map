{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./electron/electron-starter.ts","webpack:///external \"electron\"","webpack:///external \"path\"","webpack:///external \"url\""],"names":["url","require","createWindow","mainWindow","BrowserWindow","width","height","icon","path","__dirname","webPreferences","preload","webSecurity","nodeIntegration","process","loadURL","webContents","openDevTools","app","whenReady","then","on","getAllWindows","length","platform","quit"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AACA,MAAMA,GAAG,GAAGC,mBAAO,CAAC,gBAAD,CAAnB;;AAEA,SAASC,YAAT,GAAwB;AACtB;AACA,QAAMC,UAAU,GAAG,IAAIC,sDAAJ,CAAkB;AACnCC,SAAK,EAAE,IAD4B;AAEnCC,UAAM,EAAE,GAF2B;AAGnCC,QAAI,EAAEC,yCAAA,CAAUC,SAAV,EAAqB,uBAArB,CAH6B;AAInCC,kBAAc,EAAE;AACdC,aAAO,EAAEH,yCAAA,CAAUC,SAAV,EAAqB,wBAArB,CADK;AAEdG,iBAAW,EAAE,KAFC;AAGdC,qBAAe,EAAE;AAHH;AAJmB,GAAlB,CAAnB,CAFsB,CAatB;;AAEA,MAAIC,IAAJ,EAA4C;AAC1CX,cAAU,CAACY,OAAX,CAAoB,uBAApB;AACAZ,cAAU,CAACa,WAAX,CAAuBC,YAAvB;AACD,GAHD,MAGO,EAlBe,CA4BtB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACD,C,CAED;AACA;AACA;;;AACAC,4CAAG,CAACC,SAAJ,GAAgBC,IAAhB,CAAqB,MAAM;AACzBlB,cAAY;AAEZgB,8CAAG,CAACG,EAAJ,CAAO,UAAP,EAAmB,YAAY;AAC7B;AACA;AACA,QAAIjB,sDAAa,CAACkB,aAAd,GAA8BC,MAA9B,KAAyC,CAA7C,EAAgDrB,YAAY;AAC7D,GAJD;AAKD,CARD,E,CAUA;AACA;AACA;;AACAgB,4CAAG,CAACG,EAAJ,CAAO,mBAAP,EAA4B,YAAY;AACtC,MAAIP,OAAO,CAACU,QAAR,KAAqB,QAAzB,EAAmCN,4CAAG,CAACO,IAAJ;AACpC,CAFD,E,CAIA;AACA,uE;;;;;;;;;;;AClEA,qC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,gC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./electron/electron-starter.ts\");\n","// Modules to control application life and create native browser window\r\nimport { app, BrowserWindow } from 'electron';\r\nimport * as path from \"path\";\r\nconst url = require(\"url\");\r\n\r\nfunction createWindow() {\r\n  // Create the browser window.\r\n  const mainWindow = new BrowserWindow({\r\n    width: 1024,\r\n    height: 768,\r\n    icon: path.join(__dirname, '../public/appIcon.png'),\r\n    webPreferences: {\r\n      preload: path.join(__dirname, '../electron/preload.js'),\r\n      webSecurity: false,\r\n      nodeIntegration: true\r\n    }\r\n  });\r\n\r\n  //mainWindow.removeMenu();\r\n\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    mainWindow.loadURL(`http://localhost:4000`);\r\n    mainWindow.webContents.openDevTools();\r\n  } else {\r\n    mainWindow.loadURL(\r\n      url.format({\r\n        pathname: path.join(__dirname, \"index.html\"),\r\n        protocol: \"file:\",\r\n        slashes: true,\r\n      })\r\n    );\r\n  }\r\n\r\n  // and load the index.html of the app.\r\n  // const startUrl = process.env.ELECTRON_START_URL || url.format({\r\n  //   pathname: path.join(__dirname, '../index.html'),\r\n  //   protocol: 'file:',\r\n  //   slashes: true,\r\n  // });\r\n  // mainWindow.loadURL(startUrl);\r\n\r\n  // Open the DevTools.\r\n  // mainWindow.webContents.openDevTools()\r\n}\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.whenReady().then(() => {\r\n  createWindow()\r\n\r\n  app.on('activate', function () {\r\n    // On macOS it's common to re-create a window in the app when the\r\n    // dock icon is clicked and there are no other windows open.\r\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\r\n  })\r\n})\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', function () {\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and require them here.\r\n","module.exports = require(\"electron\");","module.exports = require(\"path\");","module.exports = require(\"url\");"],"sourceRoot":""}