[{"title":"Official","templates":[{"name":"Lunie Wallet for Cosmos SDK","path":"lunie-lite","readme":"# Lunie-Lite Wallet\n\nFrom [the project site](https://github.com/luniehq/lunie-light):\n\nLunie Light is a staking interface for proof-of-stake blockchains in the Cosmos ecosystem ‚Äî built for speed, simplicity, and ease-of-use.\n\nLunie Light uses [Nuxt.js](https://nuxtjs.org), and relies on the [REST API](https://cosmos.network/rpc) of a [Cosmos node](https://docs.cosmos.network/master/interfaces/rest.html) for data.\n\nLunie Light will work with the Keplr Browser Extension and the Ledger Nano. Local key management should only be used for testing and development purposes.\n\nFeatures:\n\n- ‚úÖ Super simple ‚Äî one config file\n- üèé Fast, modern web technologies\n- üì± Fully responsive\n- ‚õì Real-time on-chain data\n- üî≠ Explore mode\n- üí∏ Multi-denom balances support\n- ü•© Staking and unstaking management\n- üíØ Complete validator list with instant search\n- ü§ó Validator profiles for every validator\n- üßæ Transaction history\n","summary":"From the project site:\n\nLunie Light is a staking interface for proof-of-stake blockchains in the Cosmos ecosystem ‚Äî built for speed, simplicity, and ease-of-use.\n\nLunie Light uses Nuxt.js, and reli...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  lunielight:\n    image: ovrclk/lunie-light\n    expose:\n      - port: 3000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    lunielight:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        lunielight: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  lunielight:\n    akash:\n      profile: lunielight\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/lunie-lite"}]},{"title":"Social","templates":[{"name":"Discourse","path":"discourse","readme":"# Discourse on Akash\n\nThis guide is intended to describe the process to run Discourse Multi-Tiered application on Akash Network.\n\n## About Akash\n\nAkash Network, the world‚Äôs first decentralized and open-source cloud, accelerates deployment, scale, efficiency and price performance for high-growth industries like blockchain and machine learning/AI.\n\nAkash means \"open space\" or \"sky\" in ancient Sanskrit.\n\nhttps://akash.network/\n\n## Firsts steps on Akash\n\nRead the docs: https://docs.akash.network/ \n\nSetup your wallet: https://docs.akash.network/token/keplr\n\nStep by step guides to Akash:\n\n- Desktop App (Akashlytics): https://docs.akash.network/guides/deploy\n- Web App: https://docs.akash.network/guides/web \n- CLI: https://docs.akash.network/guides/cli\n\n## About Discourse\n\nDiscourse is the 100% open source discussion platform built for the next decade of the Internet. Use it as a mailing list, discussion forum, long-form chat room, and more! \n\nhttps://www.discourse.org/\n\n\n## Discourse on Akash in a Nutshell\n\nThe provided SDL deploy a Multi-Tiered application with 4 services/containers:\n\n### Backend\n\n- PostgreSQL\n- Redis\n- Sidekiq discourse\n\n### Frontend\n\n- Discourse\n\n\nAll you need to run your own Discourse services in Akash Network is deploy the SDL: [``deploy.yml``](https://github.com/ovrclk/awesome-akash/blob/master/discourse/./deploy.yml) script on Mainnet using your preferred \"Step by step guides to Akash\" mentioned above. \n\nAdditionally this guide show how to using [Akashlytics](https://docs.akash.network/guides/deploy):\n\n1. Download [Akashlytics](https://www.akashlytics.com/deploy) for your platform.\n2. Execute the installer and setup your wallet in Akashlytics, you will need your mnemonic (setup a new wallet is recommended).\n3. [Fund your wallet](https://docs.akash.network/guides/cli#part-3.-fund-your-account) (at least 6 AKT)\n4. If you want, customize the SDL [deploy.yml](https://github.com/ovrclk/awesome-akash/blob/master/discourse/deploy.yml)\n4. Deploy the SDL file Akashlytics (video):\n\n[![Discourse on Akash Network](https://img.youtube.com/vi/XFweRMMZ10s/0.jpg)](https://youtu.be/XFweRMMZ10s)\n\n**Note:** the process is the same if you use https://akashdeploy.hns.siasky.net/ to deploy your SDL.\n\n### Security issues\n\n#### Content Security Policy\n\nDiscourse need deploy over HTTPS otherwise could get a browser block for Content Security Policy issues [this guide](https://teeyeeyang.medium.com/how-to-use-a-custom-domain-with-your-akash-deployment-5916585734a2) written by Tee Yee Yang show how to do that.\n\nTo get past this and test your deployment, change your browser settings and temporarily disable CSP, in Firefox based browsers the steps are:\n\n- Put _about:config_ as URL and press enter\n- Confirm you know what are you doing\n- Search `security.csp.enable` and clic to disable\n- Test Discourse on Akash\n- Enable `security.csp.enable` policy\n\n#### Set `ALLOW_EMPTY_PASSWORD` to NO in production environment\n\nFollow the comments in SDL file to enable passwords\n\n```yml\n      - ALLOW_EMPTY_PASSWORD=yes\n      - POSTGRESQL_USERNAME=akt_discourse\n      - POSTGRESQL_DATABASE=akash_discourse\n      ## Set if ALLOW_EMPTY_PASSWORD=no\n      #- POSTGRESQL_PASSWORD=changeme \n      #- POSTGRESQL_POSTGRES_PASSWORD=changeme\n```\n\n## Costs\n\nThe costs depends on capacity described in section `profiles.compute` in [deploy.yml](https://github.com/ovrclk/awesome-akash/blob/master/discourse/deploy.yml) file. \n\nWith the default setting this deployment aprox. cost 6 AKT per month (someting like $14).\n\n## Disclaimer\n\nTaken from [Akashlytics website](https://github.com/ovrclk/awesome-akash/blob/master/discourse/):\n\n- Akashlytics Deploy is currently in BETA. We strongly suggest you start with a new wallet and a small amount of AKT until we further stabilize the product.\n- We're not responsible for any loss or damages related to using the app.\n- The app has a high chance of containing bugs since it's in BETA, use at your own risk.\n\n","summary":"This guide is intended to describe the process to run Discourse Multi-Tiered application on Akash Network.\n\nAbout Akash\n\nAkash Network, the world‚Äôs first decentralized and open-source cloud, accele...","deploy":"---\nversion: '2'\nservices:\n\n  postgresql:\n    image: docker.io/bitnami/postgresql:11\n    expose:\n      - port: 5432\n        proto: tcp\n        to:\n          - service: redis\n          - service: discourse\n          - service: sidekiq\n    env:\n      - ALLOW_EMPTY_PASSWORD=yes\n      - POSTGRESQL_USERNAME=akt_discourse\n      - POSTGRESQL_DATABASE=akash_discourse\n      ## Set if ALLOW_EMPTY_PASSWORD=no\n      #- POSTGRESQL_PASSWORD=changeme \n      #- POSTGRESQL_POSTGRES_PASSWORD=changeme\n\n  redis:\n    image: docker.io/bitnami/redis:6.0\n    expose:\n      - port: 6379\n        proto: tcp\n        to:\n          - service: discourse\n          - service: sidekiq\n    env:\n      - ALLOW_EMPTY_PASSWORD=yes\n      ## Set if ALLOW_EMPTY_PASSWORD=no\n      #- REDIS_PASSWORD=changeme\n\n  discourse:\n    image: docker.io/bitnami/discourse:2\n    expose:\n      - port: 3000\n        to:\n          - global: true\n    depends_on:\n      - postgresql\n      - redis\n    env:\n      - ALLOW_EMPTY_PASSWORD=yes\n      - DISCOURSE_HOST=localhost\n      - DISCOURSE_DATABASE_HOST=postgresql\n      - DISCOURSE_DATABASE_PORT_NUMBER=5432\n      - DISCOURSE_DATABASE_USER=akt_discourse\n      - DISCOURSE_DATABASE_PASSWORD=changeme\n      - DISCOURSE_DATABASE_NAME=akash_discourse\n      - DISCOURSE_REDIS_HOST=redis\n      - DISCOURSE_REDIS_PORT_NUMBER=6379\n      - POSTGRESQL_CLIENT_POSTGRES_USER=postgres\n      - POSTGRESQL_CLIENT_CREATE_DATABASE_NAME=akash_discourse\n      - POSTGRESQL_CLIENT_CREATE_DATABASE_USER=akt_discourse\n      - POSTGRESQL_CLIENT_CREATE_DATABASE_EXTENSIONS=hstore,pg_trgm\n      \n      ## Set if ALLOW_EMPTY_PASSWORD=no\n      #- DISCOURSE_DATABASE_PASSWORD=changeme\n      #- DISCOURSE_REDIS_PASSWORD=changeme\n      #- POSTGRESQL_CLIENT_POSTGRES_PASSWORD=changeme\n      #- POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD=changeme\n  \n  sidekiq:\n    image: docker.io/bitnami/discourse:latest\n    depends_on:\n      - discourse\n    args: \n      - /opt/bitnami/scripts/discourse-sidekiq/run.sh\n    env:\n      - ALLOW_EMPTY_PASSWORD=yes\n      - DISCOURSE_HOST=localhost\n      - DISCOURSE_DATABASE_HOST=postgresql\n      - DISCOURSE_DATABASE_PORT_NUMBER=5432\n      - DISCOURSE_DATABASE_USER=akt_discourse\n      - DISCOURSE_DATABASE_PASSWORD=changeme\n      - DISCOURSE_DATABASE_NAME=akash_discourse\n      - DISCOURSE_REDIS_HOST=redis\n      - DISCOURSE_REDIS_PORT_NUMBER=6379\n      \n      ## Set if ALLOW_EMPTY_PASSWORD=no\n      #- DISCOURSE_DATABASE_PASSWORD=changeme\n      #- DISCOURSE_REDIS_PASSWORD=changeme\n      \n\nprofiles:\n  compute:\n    postgresql:\n      resources:\n        cpu:\n          units: 1\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n    redis:\n      resources:\n        cpu:\n          units: 1\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n    discourse:\n      resources:\n        cpu:\n          units: 1\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n    sidekiq:\n      resources:\n        cpu:\n          units: 1\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n\n  placement:\n    westcoast:\n      attributes:\n        host: akash\n      pricing:\n        postgresql: \n          denom: uakt\n          amount: 100\n        redis: \n          denom: uakt\n          amount: 100\n        discourse: \n          denom: uakt\n          amount: 100\n        sidekiq: \n          denom: uakt\n          amount: 100\n\n\ndeployment:\n  postgresql:\n    westcoast:\n      profile: postgresql\n      count: 1 \n  redis:\n    westcoast:\n      profile: redis\n      count: 1 \n  discourse:\n    westcoast:\n      profile: discourse\n      count: 1 \n  sidekiq:\n    westcoast:\n      profile: sidekiq\n      count: 1 \n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/discourse"}]},{"title":"Peer-to-peer File Sharing","templates":[{"name":"qBittorrent","path":"qbittorrent","readme":"# qBittorrent\n\nThe [qBittorrent](https://www.qbittorrent.org/) project aims to provide an open-source software alternative to ¬µTorrent. The provided deployment configuration ([`deploy-ssh-tunnel.yaml`](https://github.com/ovrclk/awesome-akash/blob/master/qbittorrent/deploy-ssh-tunnel.yaml)) enables a relatively secure means of torrenting on Akash via qBittorrent. Please use this responsibly.\n\n![qBittorrent](https://raw.githubusercontent.com/ovrclk/awesome-akash/master/qbittorrent/qBittorrent.png)\n\n# Overview\n\nThe deployment uses a custom image (`ghcr.io/spacepotahto/qbittorrent:1.0.0`, code [here](https://github.com/spacepotahto/docker-qbittorrent-server)) that bundles the qBittorrent client ([base image](https://github.com/linuxserver/docker-qbittorrent) provided by LinuxServer.io) with a HTTP file server. This allows the user to access the qBitorrent WebUI to download files to the Akash provider, and to download the downloaded files through the HTTP file server. `deploy.yaml` and `deploy-ssh-tunnel.yaml` (recommended) differs in how security is handled.\n\n# `deploy.yaml`\n\nThis configuration deploys the qBittorrent client + File Server, and the user can access them using their web browser. However, by default the Akash deployment is accessible through HTTP only, so traffic between the user and the qBittorrent WebUI + file server is unencrypted. Thus, it's recommended to enabled HTTPS. One way to do so is to use a custom domain with CloudFlare SSL as described in this [guide](https://teeyeeyang.medium.com/how-to-use-a-custom-domain-with-your-akash-deployment-5916585734a2) written by a community member. The downside is the traffic goes through CloudFlare. For personal use, using [`deploy-ssh-tunnel.yaml`](https://github.com/ovrclk/awesome-akash/blob/master/qbittorrent/deploy-ssh-tunnel.yaml) instead is recommended.\n\n## Usage\nOnce deployed, the qBittorrent WebUI is accessible at `http://<HOSTED URI>`. The default username and password is `admin` and `adminadmin` respectively. They can be changed via the WebUI settings once authenticated.\n\nWhen downloading files using the WebUI, keep the default download location at `/downloads`. Once the files finish downloading, you can download the files to your computer by accessing the HTTP file server that serves `/downloads` at `http://<HOSTED URI>:<THE FORWARDED EXTERNAL PORT OF 5000>`.\n\n# `deploy-ssh-tunnel.yaml` (Recommended)\n\nSince this is likely for personal use only, it's also possible to utilize a SSH tunnel in lieu of HTTPS to establish an encyrpted connection between the user and qBittorrent WebUI + file server. The diagram below illustrates how this works:\n\n![SSH Tunnel](https://raw.githubusercontent.com/ovrclk/awesome-akash/master/qbittorrent/ssh-tunnel.png)\n\n\nThe qBittorrent WebUI + file server deployment is not exposed to the public internet, and is only accessible from the SSH enabled deployment. The SSH enabled deployment is only accessible by the user through an encrypted connection. Thus the user can securely access the qBittorrent WebUI + file server through SSH tunneling.\n\n## Usage\nThe [`deploy-ssh-tunnel.yaml`](https://github.com/ovrclk/awesome-akash/blob/master/qbittorrent/deploy-ssh-tunnel.yaml) is configured to enable SSH tunneling (using the `ghcr.io/spacepotahto/openssh-server:1.0.0` image, code [here](https://github.com/spacepotahto/docker-openssh-server)), with the option to use password based or key based (generally safer) authentication through setting environment variables. Once deployed, you can establish the SSH tunnel with:\n\n```\nssh -p <THE FORWARDED EXTERNAL PORT OF 2222> -N -L 8080:web:8080 -L 5000:web:5000 <USER_NAME>@<PROVIDER HOST>\n```\n\nThen in your browser, you can navigate to `http://localhost:8080` to access the qBittorrent WebUI. The default username and password is `admin` and `adminadmin` respectively. They can be changed via the WebUI settings once authenticated.\n\nWhen adding the torrent files or magnet links using the WebUI, keep the default download location at `/downloads`. Once the files finish downloading, you can download the files to your computer by accessing the HTTP file server that serves `/downloads` at `http://localhost:5000`. Due to the SSH tunneling, your file download is done through an encrypted connection.","summary":"The qBittorrent project aims to provide an open-source software alternative to ¬µTorrent. The provided deployment configuration (deploy-ssh-tunnel.yaml) enables a relatively secure means of torrenti...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  qbittorrent:\n    image: ghcr.io/spacepotahto/qbittorrent:1.0.0\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n      - port: 6881\n        as: 6881\n        to:\n          - global: true\n      - port: 5000\n        as: 5000\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    qbittorrent:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          # Specify [<Expected Total Files Download Size> + 1]Gi\n          size: 2Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        qbittorrent: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  qbittorrent:\n    akash:\n      profile: qbittorrent\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/qbittorrent"}]},{"title":"Blogging","templates":[{"name":"SteemCN","path":"steemcn","readme":"# SteemCN\n\nSteemCN is a social blogging platform where you can monetize your contents\n","summary":"SteemCN is a social blogging platform where you can monetize your contents\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  steemcn:\n    image: ericet/steem-buzz:latest\n    expose:\n      - port: 3000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    steemcn:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1024Mi\n        storage:\n          size: 1024Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        steemcn:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  steemcn:\n    akash:\n      profile: steemcn\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/steemcn"},{"name":"Ghost","path":"ghost","readme":"# Blogging platform Ghost\n\nGhost is a free and open source blogging platform written in JavaScript.\nGo to http://yourhost/ghost/ to set up your account.\n","summary":"Ghost is a free and open source blogging platform written in JavaScript.\nGo to http://yourhost/ghost/ to set up your account.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  ghost:\n    image: ghost:4.20.4\n    expose:\n      - port: 2368\n        as: 80\n        to:\n          - global: true\n        accept:\n          - mysite123.com\n    env:\n      - \"url=http://mysite123.com\"\nprofiles:\n  compute:\n    ghost:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 5Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        ghost: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  ghost:\n    akash:\n      profile: ghost\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/ghost"},{"name":"Grav","path":"Grav","readme":"# Grav\n\nDocker image: evns/grav \n\nGrav is a modern open source flat-file CMS. Go to http://yourhost/admin to set up your account.\n\nVisit the project page at [getgrav.org](https://getgrav.org)\n","summary":"Docker image: evns/grav\n\nGrav is a modern open source flat-file CMS. Go to http://yourhost/admin to set up your account.\n\nVisit the project page at getgrav.org\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  grav:\n    image: evns/grav\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    grav:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        grav:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  grav:\n    akash:\n      profile: grav\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/Grav"},{"name":"Wordpress","path":"wordpress","readme":"# Wordpress\n\nWordPress is a free and open source blogging tool and a content management system (CMS) based on PHP and MySQL.\n","summary":"WordPress is a free and open source blogging tool and a content management system (CMS) based on PHP and MySQL.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  wordpress:\n    image: wordpress \n    expose:\n      - port: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    wordpress:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 2Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        wordpress: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  wordpress:\n    akash:\n      profile: wordpress\n      count: 1\n","guide":null,"logoUrl":"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/WordPress_blue_logo.svg/1024px-WordPress_blue_logo.svg.png","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/wordpress"},{"name":"Confluence","path":"confluence","readme":"# Confluence Server\n\nFrom [the official Docker Hub image page](https://hub.docker.com/r/atlassian/confluence-server):\n\nConfluence Server is where you create, organise and discuss work with your team. Capture the knowledge that's too often lost in email inboxes and shared network drives in Confluence - where it's easy to find, use, and update. Give every team, project, or department its own space to create the things they need, whether it's meeting notes, product requirements, file lists, or project plans, you can get more done in Confluence.\n\nLearn more about Confluence Server: https://www.atlassian.com/software/confluence\n\nYou can find the repository for this Dockerfile at https://hub.docker.com/r/atlassian/confluence-server\n\nThe `deploy.yaml` uses the official Docker image to deploy a basic configuration of Confluence Server on Akash.\n\n","summary":"From the official Docker Hub image page:\n\nConfluence Server is where you create, organise and discuss work with your team. Capture the knowledge that's too often lost in email inboxes and shared ne...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  confluence:\n    image: atlassian/confluence-server:latest\n    expose:\n      - port: 8090\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    confluence:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 2Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        confluence: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  confluence:\n    akash:\n      profile: confluence\n      count: 1\n","guide":null,"logoUrl":"https://wac-cdn.atlassian.com/dam/jcr:5d1374c2-276f-4bca-9ce4-813aba614b7a/confluence-icon-gradient-blue.svg?cdnVersion=696","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/confluence"},{"name":"Drupal","path":"drupal","readme":"# Drupal\n\nDrupal is a free and open-source content-management framework written in PHP and distributed under the GNU General Public License. It is used as a back-end framework for at least 2.1% of all Web sites worldwide ranging from personal blogs to corporate, political, and government sites including WhiteHouse.gov and data.gov.uk. It is also used for knowledge management and business collaboration.\n\n","summary":"Drupal is a free and open-source content-management framework written in PHP and distributed under the GNU General Public License. It is used as a back-end framework for at least 2.1% of all Web si...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  drupal:\n    image: drupal \n    expose:\n      - port: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    drupal:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        drupal: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  drupal:\n    akash:\n      profile: drupal\n      count: 1\n","guide":null,"logoUrl":"https://seeklogo.com/images/D/drupal-logo-AD2AF3310E-seeklogo.com.png","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/drupal"},{"name":"Wiki.js","path":"wikijs","readme":"# Wiki.js\n\nFrom [the project site](https://github.com/Requarks/wiki):\n\nA modern, lightweight and powerful wiki app built on NodeJS.\n\nThe `deploy.yaml` uses the [official Docker image](https://hub.docker.com/r/requarks/wiki) and the [documentation](https://docs.requarks.io/install/docker) to deploy a Wiki.js backed by a sqlite database on Akash.\n","summary":"From the project site:\n\nA modern, lightweight and powerful wiki app built on NodeJS.\n\nThe deploy.yaml uses the official Docker image and the documentation to deploy a Wiki.js backed by a sqlite dat...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  wiki:\n    image: requarks/wiki:2\n    env:\n      - DB_TYPE=sqlite\n      - DB_FILEPATH=/wiki/app.db\n    expose:\n      - port: 3000\n        as: 80\n        to:\n          - global: true\n    \nprofiles:\n  compute:\n    wiki:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        wiki: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  wiki:\n    akash:\n      profile: wiki\n      count: 1\n","guide":null,"logoUrl":"https://static.requarks.io/logo/wikijs-butterfly.svg","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/wikijs"}]},{"title":"Built with Cosmos-SDK","templates":[{"name":"Dharani","path":"Dharani","readme":"# Dharani\nDharani - Selling fractional property aka Real Estate tokenization. Built with the Cosmos-SDK. [more](https://docs.dharani.multiverse.tk)\n","summary":"Dharani - Selling fractional property aka Real Estate tokenization. Built with the Cosmos-SDK. more\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  dharani:\n    image: saisunkari19/dharani:1.0\n    expose:\n      - port: 80\n        as: 80\n        accept:\n          - \"dcloud.dharani.multiverse.tk\"\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    dharani:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        dharani: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  dharani:\n    akash:\n      profile: dharani\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/Dharani"},{"name":"Big Dipper","path":"big-dipper","readme":"Big Dipper\n=======\n\nBig Dipper is a widely used blockchain explorer developed by [Forbole](https://www.forbole.com/).\n\nThis deployment consists of 2 containers, one running MongoDB, the other running the web frontend.\n\nThe image was built using the [Dockerfile](https://github.com/forbole/big-dipper/tree/akash-challenge-3) from github, and the SDL file adapted from the docker-compose file in the same repo.\n","summary":"Big Dipper\n\nBig Dipper is a widely used blockchain explorer developed by Forbole.\n\nThis deployment consists of 2 containers, one running MongoDB, the other running the web frontend.\n\nThe image was ...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  mongo:\n    image: mongo:latest\n    command:\n      - \"docker-entrypoint.sh\"\n    args:\n      - \"--storageEngine=wiredTiger\"\n    expose:\n      - port: 27017\n        as: 27017\n        to:\n          - service: mongo\n  web:\n    image: raviforbole/bigdipper:akash\n    depends-on:\n      - mongo\n    env:\n      - \"ROOT_URL=http://localhost\"\n      - \"MONGO_URL=mongodb://mongo:27017/meteor\"\n      - \"PORT=3000\"\n      - 'METEOR_SETTINGS={\"public\":{\"chainName\":\"Akash Edgenet\",\"chainId\":\"akash-edgenet-1\",\"gtm\":false,\"slashingWindow\":10000,\"uptimeWindow\":250,\"initialPageSize\":30,\"secp256k1\":false,\"bech32PrefixAccAddr\":\"akash\",\"bech32PrefixAccPub\":\"akashpub\",\"bech32PrefixValAddr\":\"akashvaloper\",\"bech32PrefixValPub\":\"akashvaloperpub\",\"bech32PrefixConsAddr\":\"akashvalcons\",\"bech32PrefixConsPub\":\"akashvalconspub\",\"bondDenom\":\"uakt\",\"powerReduction\":1000000,\"coins\":[{\"denom\":\"uakt\",\"displayName\":\"AKT\",\"fraction\":1000000}],\"modules\":{\"supply\":true,\"minting\":false,\"gov\":true},\"gasPrice\":0.02,\"coingeckoId\":false},\"remote\":{\"rpc\":\"https://rpc.edgenet.akash.forbole.com:443\",\"lcd\":\"https://api.edgenet.akash.forbole.com:443\"},\"debug\":{\"startTimer\":true},\"params\":{\"startHeight\":0,\"defaultBlockTime\":5000,\"validatorUpdateWindow\":300,\"blockInterval\":15000,\"consensusInterval\":1000,\"statusInterval\":7500,\"signingInfoInterval\":1800000,\"proposalInterval\":5000,\"missedBlocksInterval\":60000,\"delegationInterval\":900000}}'\n    expose:\n      - port: 3000\n        as: 80\n        accept:\n          - \"edgenet.decloud.bigdipper.live\"\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    web:\n      resources:\n        cpu:\n          units: 0.6\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n    mongo:\n      resources:\n        cpu:\n          units: 0.4\n        memory:\n          size: 512Mi\n        storage:\n          size: 2Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        web:\n          denom: uakt\n          amount: 100\n        mongo: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  web:\n    akash:\n      profile: web\n      count: 1\n  mongo:\n    akash:\n      profile: mongo\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/big-dipper"}]},{"title":"Chat","templates":[{"name":"Mattermost","path":"mattermost","readme":"# Mattermost\n\n[Mattermost](https://mattermost.com/) is an open source collaboration platform built for developers (Slack alternative).\n\nThe `deploy.yaml` uses the official [Mattermost preview mode Docker image](https://hub.docker.com/r/mattermost/mattermost-preview) to deploy a basic configuration on Akash.\n\n","summary":"Mattermost is an open source collaboration platform built for developers (Slack alternative).\n\nThe deploy.yaml uses the official Mattermost preview mode Docker image to deploy a basic configuration...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  mattermost:\n    image: mattermost/mattermost-preview\n    expose:\n      - port: 8065\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    mattermost:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        mattermost: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  mattermost:\n    akash:\n      profile: mattermost\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/mattermost"}]},{"title":"Continuous Integration","templates":[{"name":"Jenkins","path":"jenkins","readme":"# Jenkins\n\nJenkins ‚Äì an open source automation server which enables developers around the world to reliably build, test, and deploy their software.\n","summary":"Jenkins ‚Äì an open source automation server which enables developers around the world to reliably build, test, and deploy their software.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  jenkins:\n    image: jenkins/jenkins:lts\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n      - port: 50000\n        to:\n          - global: true\nprofiles:\n  compute:\n    jenkins:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 5Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        jenkins:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  jenkins:\n    akash:\n      profile: jenkins\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/jenkins"},{"name":"Bitbucket","path":"bitbucket","readme":"# Bitbucket Server\n\nFrom [the official Docker Hub image page](https://hub.docker.com/r/atlassian/bitbucket-server):\n\nBitbucket Server is an on-premises source code management solution for Git that's secure, fast, and enterprise grade. Create and manage repositories, set up fine-grained permissions, and collaborate on code - all with the flexibility of your servers.\n\nLearn more about Bitbucket Server: https://www.atlassian.com/software/bitbucket/server\n\nYou can find the repository for this Dockerfile at https://hub.docker.com/r/atlassian/bitbucket-server\n\nThe `deploy.yaml` uses the official Docker image to deploy a basic configuration of Bitbucket Server on Akash.\n\n","summary":"From the official Docker Hub image page:\n\nBitbucket Server is an on-premises source code management solution for Git that's secure, fast, and enterprise grade. Create and manage repositories, set u...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  bitbucket:\n    image: atlassian/bitbucket-server:latest\n    expose:\n      - port: 7990\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    bitbucket:\n      resources:\n        cpu:\n          units: 0.8\n        memory:\n          size: 1Gi\n        storage:\n          size: 2Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        bitbucket: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  bitbucket:\n    akash:\n      profile: bitbucket\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/bitbucket"},{"name":"Azure Devops Agent","path":"azure-devops-agent","readme":"# Run azure devops agent on Akash\n\nThis template is to deploy an azure devops agent on the Akash network.\n\nAn azure devops agent can be used in azure devops pipelines to build and deploy applications.\n\nHere is the docker image used by the template:\nhttps://github.com/Odiovock/akash-azure-devops-agent\n\nThe port `3000` is not really needed. It was added because the providers were giving this error otherwise: `invalid manifest: zero global services`\n\n## Environment Variables\n\nThese environment variables can be set in the `env` section of the SDL file.\n\n| Name | Description                                                 |\n|----------------------|-------------------------------------------------------------|\n| AZP_URL              | The URL of the Azure DevOps or Azure DevOps Server instance. |\n| AZP_TOKEN            | [Personal Access Token (PAT)](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate) with **Agent Pools (read, manage)** scope, created by a user who has permission to [configure agents](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/pools-queues#creating-agent-pools), at `AZP_URL`.    |\n| AZP_AGENT_NAME       | Agent name (default value: the container hostname).          |\n| AZP_POOL             | Agent pool name (default value: `Default`).                  |\n| AZP_WORK             | Work directory (default value: `_work`).                     |","summary":"This template is to deploy an azure devops agent on the Akash network.\n\nAn azure devops agent can be used in azure devops pipelines to build and deploy applications.\n\nHere is the docker image used ...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  web:\n    image: odiovock/akash-azure-devops-agent:0.1.1\n    env:\n      - \"AZP_URL=<Your_Azure_URL>\"\n      - \"AZP_TOKEN=<Your_Azure_Token>\"\n      - \"AZP_AGENT_NAME=<Agent_Name>\"\n    expose:\n      - port: 3000\n        as: 3000\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    web:\n      resources:\n        cpu:\n          units: 1\n        memory:\n          size: 1Gi\n        storage:\n          size: 5Gi\n  placement:\n    dcloud:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        web:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  web:\n    dcloud:\n      profile: web\n      count: 1","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/azure-devops-agent"}]},{"title":"Data Visualization","templates":[{"name":"UFO Sightings","path":"ufo-data-vis","readme":"# UFO Sightings Data Visualization\n\nThis data visualization project showcases a tool for exploring over 80K reports of UFO sightings around the world collected from 1906 - 2014. The original project page is [here](https://github.com/wlouie1/UFO-Sightings). \n\n![ufosightings](https://raw.githubusercontent.com/wlouie1/UFO-Sightings/master/resources/images/a4ufo_small.gif)\n\nThe project was built using vanilla JS/HTML/CSS, and a [docker image](https://hub.docker.com/r/wlouie1/ufo-data-vis) was created to bundle a simple Nginx server to serve the static files. The `deploy.yaml` uses this docker image to very easily deploy the app on Akash.\n","summary":"This data visualization project showcases a tool for exploring over 80K reports of UFO sightings around the world collected from 1906 - 2014. The original project page is here.\n\nufosightings\n\nThe p...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  ufoweb:\n    image: wlouie1/ufo-data-vis:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    ufoweb:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        ufoweb: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  ufoweb:\n    akash:\n      profile: ufoweb\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/ufo-data-vis"}]},{"title":"Databases and Administration","templates":[{"name":"pgAdmin","path":"pgadmin4","readme":"pgAdmin4\n=======\npgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.\nMore details [https://www.pgadmin.org](https://www.pgadmin.org/)\n","summary":"pgAdmin4\n\npgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.\nMore details https://...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  pgadmin:\n    image: dpage/pgadmin4 \n    expose:\n      - port: 80 \n        as: 80 \n        to:\n          - global: true\n    env:\n      - PGADMIN_DEFAULT_EMAIL=admin@gmail.com\n      - PGADMIN_DEFAULT_PASSWORD=admin\n\nprofiles:\n  compute:\n    pgadmin:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        pgadmin: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  pgadmin:\n    akash:\n      profile: pgadmin\n      count: 1 \n","guide":null,"logoUrl":"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/1200px-Postgresql_elephant.svg.png","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/pgadmin4"},{"name":"mongoDB","path":"mongoDB","readme":"MongoDB\n=======\nThe database for modern applications MongoDB is a general purpose, document-based, distributed database built for modern application developers and for the cloud era.\n\nNo database makes you more productive.\n\nMore details [https://www.mongodb.com/](https://www.mongodb.com/)\n","summary":"MongoDB\n\nThe database for modern applications MongoDB is a general purpose, document-based, distributed database built for modern application developers and for the cloud era.\n\nNo database makes yo...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  mongo:\n    image: mongo:latest \n    expose:\n      - port: 27017 \n        to:\n          - global: true\n    env:\n      - MONGO_INITDB_ROOT_USERNAME=root\n      - MONGO_INITDB_ROOT_PASSWORD=rootpassword\n\nprofiles:\n  compute:\n    mongo:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        mongo: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  mongo:\n    akash:\n      profile: mongo\n      count: 1 \n","guide":null,"logoUrl":"https://1000logos.net/wp-content/uploads/2020/08/MongoDB-Emblem.jpg","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/mongoDB"},{"name":"postgresSQL","path":"postgres","readme":"Postgres\n=======\nPostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.\nMore details [https://www.postgresql.org/](https://www.postgresql.org/)\n","summary":"Postgres\n\nPostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  postgres:\n    image: postgres \n    expose:\n      - port: 5432\n        to:\n          - global: true\n    env:\n      - \"POSTGRES_USER=admin\"\n      - \"POSTGRES_PASSWORD=let-me-in\"\n      - \"POSTGRES_DB=mydb\"\nprofiles:\n  compute:\n    postgres:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        postgres: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  postgres:\n    akash:\n      profile: postgres\n      count: 1 \n","guide":null,"logoUrl":"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/745px-Postgresql_elephant.svg.png","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/postgres"},{"name":"adminer","path":"adminer","readme":"# Adminer\n\nAdminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP.\nConversely to phpMyAdmin, it consist of a single file ready to deploy to the target server.\nAdminer is available for MySQL, PostgreSQL, SQLite, MS SQL, Oracle, Firebird, SimpleDB, Elasticsearch and MongoDB.\n","summary":"Adminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP.\nConversely to phpMyAdmin, it consist of a single file ready to deploy to the target server.\nAdminer is ava...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  adminer:\n    image: adminer\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    adminer:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        adminer:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  adminer:\n    akash:\n      profile: adminer\n      count: 1\n","guide":null,"logoUrl":"https://www.adminer.org/static/images/logo.png","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/adminer"},{"name":"MySQL","path":"MySQL","readme":"MySQL\n=======\nThe world's most popular open source database\nMore details [https://www.mysql.com/](https://www.mysql.com/)\n","summary":"MySQL\n\nThe world's most popular open source database\nMore details https://www.mysql.com/\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  mysql:\n    image: mysql \n    expose:\n      - port: 3306 \n        to:\n          - global: true\n      - port: 8080\n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    mysql:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        mysql: \n          denom: uakt\n          amount: 100\ndeployment:\n  mysql:\n    akash:\n      profile: mysql\n      count: 1 \n","guide":null,"logoUrl":"https://download.logo.wine/logo/MySQL/MySQL-Logo.wine.png","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/MySQL"},{"name":"CouchDB","path":"couchdb","readme":"# CouchDB\n\nApache CouchDB‚Ñ¢ lets you access your data where you need it by defining the Couch Replication Protocol that is implemented by a variety of projects \nand products that span every imaginable computing environment from globally distributed server-clusters, over mobile phones to web browsers. \nSoftware that is compatible with the Couch Replication Protocol include PouchDB and Cloudant.\n\nServer http commands can be found here: https://docs.couchdb.org/en/stable/intro/curl.html\n","summary":"Apache CouchDB‚Ñ¢ lets you access your data where you need it by defining the Couch Replication Protocol that is implemented by a variety of projects\nand products that span every imaginable computing...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  couchdb:\n    image: couchdb \n    env:\n      - COUCHDB_USER=admin\n      - COUCHDB_PASSWORD=password\n    expose:\n      - port: 5984\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    couchdb:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        couchdb: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  couchdb:\n    akash:\n      profile: couchdb\n      count: 1\n","guide":null,"logoUrl":"https://cdn.worldvectorlogo.com/logos/couchdb-2.svg","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/couchdb"},{"name":"InfluxDB","path":"influxdb","readme":"# InfluxDB\n\nInfluxDB is a time series database built from the ground up to handle high write and query loads.\nInfluxDB is meant to be used as a backing store for any use case involving large amounts of \ntimestamped data, including DevOps monitoring, application metrics, IoT sensor data, and \nreal-time analytics.\n\nFor HTTP API see https://docs.influxdata.com/influxdb/v1.8/tools/api/#influxdb-1-x-http-endpoints","summary":"InfluxDB is a time series database built from the ground up to handle high write and query loads.\nInfluxDB is meant to be used as a backing store for any use case involving large amounts of\ntimesta...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  influxdb:\n    image: influxdb \n    env:\n      - INFLUXDB_ADMIN_USER=admin\n      - INFLUXDB_ADMIN_PASSWORD=password\n    expose:\n      - port: 8086\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    influxdb:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        influxdb: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  influxdb:\n    akash:\n      profile: influxdb\n      count: 1\n","guide":null,"logoUrl":"https://influxdata.github.io/branding/img/downloads/influxdata-logo--symbol--pool.svg","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/influxdb"}]},{"title":"DeFi","description":"Awesome DeFi apps you can deploy on Akash","templates":[{"name":"Serum DEX UI","path":"serum","readme":"# Serum DEX UI\n\nFrom [the project site](https://projectserum.com/):\n\nSerum is a decentralized exchange (DEX) and ecosystem that brings unprecedented speed and low transaction costs to decentralized finance. It is built on Solana and is completely permissionless.\n\n* On-chain Orderbooks: Full limit orderbooks with an interface familiar to that of centralized exchanges\n* Speed: Sub-second trading and settlement\n* Cost: Lower transaction costs than any other DEX: $0.00001 per transaction\n","summary":"From the project site:\n\nSerum is a decentralized exchange (DEX) and ecosystem that brings unprecedented speed and low transaction costs to decentralized finance. It is built on Solana and is comple...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  serumui:\n    image: ovrclk/serum-dex-ui\n    expose:\n      - port: 5000\n        as: 80\n        accept:\n          - serum.decloud.akash.network\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    serumui:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        serumui: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  serumui:\n    akash:\n      profile: serumui\n      count: 1\n","guide":"# Deploying Serum Dex on Akash\n\nThis is a guide to containerizing [Serum DEX](https://github.com/project-serum/serum-dex-ui) and deploying on [Akash](https://akash.network) in a non-custodial way. Akash is a permissionless and censorship-resistant cloud network that guarantees sovereignty over your data and your applications. With Akash, you‚Äôre in complete control of all aspects of the life cycle of an application with no middleman.\n\n## Before We Begin\n\nThis is a technical guide, best suited to a reader with basic Linux command line knowledge. The audience for this guide is intended for includes:\n\n* Application developers with little or no systems administration experience, wanting to deploy applications on the decentralized cloud.\n* System administrators with little or no experience with infrastructure automation, wanting to learn more.\n* Infrastructure automation engineers that want to explore decentralized cloud.\n* Anyone who wants to get a feel for the current state of the decentralized cloud ecosystem.\n\nYou will need the below setup before we being:\n\n1) Install Akash: Make sure to have Akash client installed on your workstation, check [install guide](https://docs.akash.network/guides/install) for instructions.\n2) Choose Your Akash Network: You'll need to know information about the network you're connecting your node to. See [Choosing a Network](https://docs.akash.network/guides/version) for how to obtain any network-related information.\n3) Fund Your Account: You'll need a AKT wallet with funds to pay for your deployment. See the [funding guide](https://docs.akash.network/guides/funding)\ncreating a key and funding your account.\n4) Install Docker: You'll need docker running on your workstation, follow this [guide](https://docs.docker.com/get-docker/) to setup Docker on your workstation..\n5) Setup Container Registry: To stage your containers to deploy onto Akash. We'll Docker Hub in this guide. [Signup](https://docs.docker.com/docker-hub/) for a free Docker Hub account if you haven't.\n6) Setup Builpacks.io: Builpacks.io is a Cloud Native Buildpacks transform your application source code into images that can run on any cloud. Install `pack` tool using this [guide](https://buildpacks.io/docs/tools/pack/#install).\n\n### Set up your Environment\n\nWe will be using shell variables throughout this guide for convenience and clarity.  Ensure you have the below set of variables defined on your shell, you can use `export VARNAME=...`:\n\n|Name|Description|\n|---|---|\n|`AKASH_NODE`| Akash network configuration base URL. See [here](/guides/version.md).|\n|`AKASH_CHAIN_ID`| Chain ID of the Akash network connecting to. See [here](/guides/version.md).|\n|`ACCOUNT_ADDRESS`| The address of your account.  See [here](/guides/wallet/README.md#account-address).|\n|`KEY_NAME` | The name of the key you will be deploying from. See [here](/guides/wallet/README.md) if you haven't yet setup a key|\n\nVerify you have correct `$AKASH_NODE`, that you have populated while [configuring the connection](/guides/version) using `export AKASH_NODE=$(curl -s \"$AKASH_NET/rpc-nodes.txt\" | shuf -n 1)`.\n\n```sh\necho $AKASH_NODE $AKASH_CHAIN_ID\n```\n\nYou should see a response similar to:\n\n```\ntcp://rpc-edgenet.akashdev.net:2665 akash-edgenet-1\n```\n\nYour values may differ depending on the network you're connecting to, `tcp://rpc-edgenet.akashdev.net:2665` and `akash-edgenet-1` are details for [edgenet](https://github.com/ovrclk/net/tree/master/edgenet).\n\nVerify you have the key set up and your account has sufficient balances, see the [funding guide](/guides/wallet/funding.md) otherwise:\n\nMy local key is named `alice`, the below command should return the name you've used:\n\n```sh\necho $KEY_NAME \n```\nThe above should return a response similar to:\n\n```\nalice\n```\n\nPopulate `ACCOUNT_ADDRESS` from `KEY_NAME` and verify:\n\n```sh\nexport ACCOUNT_ADDRESS=\"$(akash keys show $KEY_NAME -a)\"\n\necho $ACCOUNT_ADDRESS\n\nakash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n```\n\nCheck your account has sufficient balance by running:\n\n```sh\nakash query bank balances --node $AKASH_NODE $ACCOUNT_ADDRESS\n```\n\nYou should see a response similar to:\n\n```\nbalances:\n- amount: \"93000637\"\n  denom: uakt\npagination:\n  next_key: null\n  total: \"0\"\n```\n\nPlease note the balance indicated is is denominated in uAKT (AKT * 10^-6), in the above example, the account has a balance of *93 AKT*. We're now setup to deploy.\n\n## Build Serum DEX UI Container\n\nThis setup is necessary for building the docker container. You can skip this step and process to deploying if you'd like deploy the existing container `ovrclk/serum-dex-ui`\n\nGet the source code:\n\n```sh\ngit clone https://github.com/project-serum/serum-dex-ui\ncd serum-dex-ui\n```\n\nInstall dependencies using:\n\n```\nyarn install\n```\n\nAdd `serve` dependency using:\n\n```\nyarn add serve\n```\n\nCreate a `Procfile` to define the `web` process:\n\n```sh\ncat >Procfile<<EOF\nweb: yarn serve -s build\nEOF>>\n```\n\nWe will be using Heroku Buildpacks with Buildpack.io to build our container. First pick an image name and store it in `IMAGE` environment variable. I chose `ovrclk/serum-dex-ui` as my image name, you should choose `<docker-id>/serum-dex-ui` as yours:\n\n```sh\nexport IMAGE=ovrclk/serum-dex-ui\n```\n\nTo build the container, run:\n\n```sh\npack build $IMAGE --builder heroku/buildpacks:18\n```\n\nRun the docker image locally to verify it works:\n\n```sh\ndocker run -it --rm -e NODE_ENV=production -p 5000:5000 $IMAGE\n```\n\nVerify by visiting http://localhost:5000 on your browser.\n\nPush the image to Docker Hub (Container Registry) using:\n\n```\ndocker push $IMAGE\n```\n\n## Create the Deployment\n\nCreate a deployment configuration `deploy.yaml` to deploy the `ovrclk/serum-dex-ui` for [Serum DEX UI](https://github.com/project-serum/serum-dex-ui) Node JS app container using [SDL](https://docs.akash.network/documentation/sdl):\n\n```sh\ncat > deploy.yaml <<EOF\n---\nversion: \"2.0\"\n\nservices:\n  web:\n    image: ovrclk/serum-dex-ui\n    expose:\n      - port: 5000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    web:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        web: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  web:\n    akash:\n      profile: web\n      count: 1\n\nEOF>>\n```\n\nAlternatively, you can use cURL to download:\n\n```\ncurl -s https://raw.githubusercontent.com/ovrclk/awesome-akash/master/serum/deploy.yaml > deploy.yaml\n```\n\nYou may use the sample deployment file as-is or modify it for your own needs as desscribed in our [SDL (Stack Definition Language](https://docs.akash.network/documentation/sdl) documentation. \n\n{% hint style=\"warn\" %}\n\nPlease note if you are running on the testnet, you are limited in the amount of testnet resources you may request. \n\n{% endhint %}\n\nTo deploy on Akash, run:\n\n```sh\nakash tx deployment create deploy.yaml --from $KEY_NAME --node $AKASH_NODE --chain-id $AKASH_CHAIN_ID --fees 5000uakt -y\n```\n\nIn this step, you post your deployment, the Akash marketplace matches you with a provider via auction. To create a deployment use akash deployment. The syntax for the deployment is `akash tx deployment create <config-path> --from <key-name>`.\n\n\nYou can check the status of your lease by running:\n\n```\nakash query market lease list --owner $ACCOUNT_ADDRESS --node $AKASH_NODE --state active\n\n```\n\n```yaml\n- lease_id:\n    dseq: \"115884\"\n    gseq: 1\n    oseq: 1\n    owner: akash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n    provider: akash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0\n  price:\n    amount: \"51\"\n    denom: uakt\n  state: active\npagination:\n  next_key: null\n  total: \"0\"\n```\nIn the above example, we can see that a lease is created using for *51 uakt* or *0.0000051 AKT* per block to execute the container.\n\nFor convenience and clarity for future referencing, we can extract the below set of values to shell variables that we will be using to reference the deployment:\n\n| Attribute | Value |\n| --- | --- |\n| `PROVIDER` | `akash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0` |\n| `DSEQ` | `115884` |\n| `OSEQ` | `1` |\n| `GSEQ` | `1` |\n\nVerify we have the right values populated by running:\n\n```sh\necho $PROVIDER $DSEQ $OSEQ $GSEQ\n```\n\nYou should see a response similar to:\n\n```\nakash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0 115884 1 1\n```\n\nUpload the manifest using the values from above step:\n\n```sh\nakash provider send-manifest deploy.yaml --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --owner $ACCOUNT_ADDRESS --provider $PROVIDER \n```\n\nYour image is now deployed, once you uploaded the manifest. You can retrieve the access details by running the below:\n\n```sh\nakash provider lease-status --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --provider $PROVIDER --owner $ACCOUNT_ADDRESS\n```\n\nYou should see a response similar to:\n\n```json\n{\n  \"services\": {\n    \"web\": {\n      \"name\": \"web\",\n      \"available\": 1,\n      \"total\": 1,\n      \"uris\": [\n        \"phzz2bcjjoz7jhvderxo5d.provider1.akashdev.net\"\n      ],\n      \"observed-generation\": 0,\n      \"replicas\": 0,\n      \"updated-replicas\": 0,\n      \"ready-replicas\": 0,\n      \"available-replicas\": 0\n    }\n  },\n  \"forwarded-ports\": {}\n}\n```\n\nYou can access the application by visiting the hostnames mapped to your deployment. In above example, its http://phzz2bcjjoz7jhvderxo5d.provider1.akashdev.net\n\n## Service Logs\n\nYou can view the logs for your applicaiton using `akash provider service-logs`, for example:\n\n```sh\nakash provider service-logs --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --provider $PROVIDER --owner $ACCOUNT_ADDRESS --service web\n```\n\nYou should see a response similar to:\n\n```\n[web-7447d7769-c6t4f] yarn run v1.22.10\n[web-7447d7769-c6t4f] $ /workspace/node_modules/.bin/serve build\n[web-7447d7769-c6t4f] INFO: Accepting connections at http://localhost:5000\n```\n\n## Close your deployment\n\nWhen you are done with your application, close the deployment. This will deprovision your container and stop the token transfer. Close deployment using deployment by creating a `deployment-close` transaction:\n\n```sh\nakash tx deployment close --node $AKASH_NODE --chain-id $AKASH_CHAIN_ID --dseq $DSEQ --owner $ACCOUNT_ADDRESS --from $KEY_NAME -y --fees 5000uakt\n```\nAdditionally, you can also query the market to check if your lease is closed:\n\n```sh\nakash query market lease list --owner $ACCOUNT_ADDRESS --node $AKASH_NODE \n```\nYou should see a response similar to:\n\n```yaml\nleases:\n- lease_id:\n    dseq: \"115884\"\n    gseq: 1\n    oseq: 1\n    owner: akash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n    provider: akash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0\n  price:\n    amount: \"186\"\n    denom: uakt\n  state: closed\npagination:\n  next_key: null\n  total: \"0\"\n```\n","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/serum"},{"name":"Uniswap","path":"uniswap","readme":"# Uniswap\n\nFrom [Uniswap Interface](https://github.com/Uniswap/uniswap-interface)\n\nAn open source interface for Uniswap -- a protocol for decentralized exchange of Ethereum tokens.\nDeploy on akash decloud.","summary":"From Uniswap Interface\n\nAn open source interface for Uniswap -- a protocol for decentralized exchange of Ethereum tokens.\nDeploy on akash decloud.","deploy":"---\nversion: \"2.0\"\n\nservices:\n  uniswap:\n    image: scriptmoney/uniswap:v2\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    uniswap:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        uniswap: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  uniswap:\n    akash:\n      profile: uniswap\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/uniswap"},{"name":"dFed","path":"dfed","readme":"# dFed\n\nFrom [dFed-fianace](https://github.com/dFed-finance/interface)\n\ndFed.finance is a fully decentralized protocol, please use at your own risk.","summary":"From dFed-fianace\n\ndFed.finance is a fully decentralized protocol, please use at your own risk.","deploy":"---\nversion: \"2.0\"\n\nservices:\n  dfed:\n    image: jiananxu/dfed:v1\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    dfed:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        dfed: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  dfed:\n    akash:\n      profile: dfed\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/dfed"},{"name":"Pancake Swap","path":"pancake-swap","readme":"Pancake Swap\n=======\n\nPancakeSwap is an automated market maker (‚ÄúAMM‚Äù) that allows two tokens to be exchanged on the Binance Smart Chain (BSC). It is fast, cheap, and allows anyone to participate.\n\nThis repo is responsible for the exchange/pool interfaace of the AMM.\n","summary":"Pancake Swap\n\nPancakeSwap is an automated market maker (‚ÄúAMM‚Äù) that allows two tokens to be exchanged on the Binance Smart Chain (BSC). It is fast, cheap, and allows anyone to participate.\n\nThis re...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  pancakeswap:\n    image: yuravorobei/pancake-swap\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    pancakeswap:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        pancakeswap: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  pancakeswap:\n    akash:\n      profile: pancakeswap\n      count: 1\n","guide":"# Deploying Serum Dex on Akash\n\nThis is a guide to deploying [Pancake Swap Interface](https://github.com/pancakeswap/pancake-swap-interface) on [Akash](https://akash.network) in a non-custodial way. Akash is a permissionless and censorship-resistant cloud network that guarantees sovereignty over your data and your applications. With Akash, you‚Äôre in complete control of all aspects of the life cycle of an application with no middleman.\n\n## Before We Begin\n\nThis is a technical guide, best suited to a reader with basic Linux command line knowledge. The audience for this guide is intended for includes:\n\n* Application developers with little or no systems administration experience, wanting to deploy applications on the decentralized cloud.\n* System administrators with little or no experience with infrastructure automation, wanting to learn more.\n* Infrastructure automation engineers that want to explore decentralized cloud.\n* Anyone who wants to get a feel for the current state of the decentralized cloud ecosystem.\n\nYou will need the below setup before we being:\n\n1) Install Akash: Make sure to have Akash client installed on your workstation, check [install guide](https://docs.akash.network/guides/install) for instructions.\n2) Choose Your Akash Network: You'll need to know information about the network you're connecting your node to. See [Choosing a Network](https://docs.akash.network/guides/version) for how to obtain any network-related information.\n3) Fund Your Account: You'll need a AKT wallet with funds to pay for your deployment. See the [funding guide](https://docs.akash.network/guides/funding)\ncreating a key and funding your account.\n4) Install Docker: You'll need docker running on your workstation, follow this [guide](https://docs.docker.com/get-docker/) to setup Docker on your workstation..\n5) Setup Container Registry: To stage your containers to deploy onto Akash. We'll Docker Hub in this guide. [Signup](https://docs.docker.com/docker-hub/) for a free Docker Hub account if you haven't.\n6) Setup Builpacks.io: Builpacks.io is a Cloud Native Buildpacks transform your application source code into images that can run on any cloud. Install `pack` tool using this [guide](https://buildpacks.io/docs/tools/pack/#install).\n\n### Set up your Environment\n\nWe will be using shell variables throughout this guide for convenience and clarity.  Ensure you have the below set of variables defined on your shell, you can use `export VARNAME=...`:\n\n|Name|Description|\n|---|---|\n|`AKASH_NODE`| Akash network configuration base URL. See [here](/guides/version.md).|\n|`AKASH_CHAIN_ID`| Chain ID of the Akash network connecting to. See [here](/guides/version.md).|\n|`ACCOUNT_ADDRESS`| The address of your account.  See [here](/guides/wallet/README.md#account-address).|\n|`KEY_NAME` | The name of the key you will be deploying from. See [here](/guides/wallet/README.md) if you haven't yet setup a key|\n\nVerify you have correct `$AKASH_NODE`, that you have populated while [configuring the connection](/guides/version) using `export AKASH_NODE=$(curl -s \"$AKASH_NET/rpc-nodes.txt\" | shuf -n 1)`.\n\n```sh\necho $AKASH_NODE $AKASH_CHAIN_ID\n```\n\nYou should see a response similar to:\n\n```\ntcp://rpc-edgenet.akashdev.net:2665 akash-edgenet-1\n```\n\nYour values may differ depending on the network you're connecting to, `tcp://rpc-edgenet.akashdev.net:2665` and `akash-edgenet-1` are details for [edgenet](https://github.com/ovrclk/net/tree/master/edgenet).\n\nVerify you have the key set up and your account has sufficient balances, see the [funding guide](/guides/wallet/funding.md) otherwise:\n\nMy local key is named `alice`, the below command should return the name you've used:\n\n```sh\necho $KEY_NAME \n```\nThe above should return a response similar to:\n\n```\nalice\n```\n\nPopulate `ACCOUNT_ADDRESS` from `KEY_NAME` and verify:\n\n```sh\nexport ACCOUNT_ADDRESS=\"$(akash keys show $KEY_NAME -a)\"\n\necho $ACCOUNT_ADDRESS\n\nakash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n```\n\nCheck your account has sufficient balance by running:\n\n```sh\nakash query bank balances --node $AKASH_NODE $ACCOUNT_ADDRESS\n```\n\nYou should see a response similar to:\n\n```\nbalances:\n- amount: \"93000637\"\n  denom: uakt\npagination:\n  next_key: null\n  total: \"0\"\n```\n\nPlease note the balance indicated is is denominated in uAKT (AKT * 10^-6), in the above example, the account has a balance of *93 AKT*. We're now setup to deploy.\n\n## Create the Deployment\n\nCreate a deployment configuration `deploy.yaml` to deploy the `yuravorobei/pancake-swap` for [Pancake Swap Interface](https://github.com/pancakeswap/pancake-swap-interface) Node JS app container using [SDL](https://docs.akash.network/documentation/sdl):\n\n```sh\ncat > deploy.yaml <<EOF\n---\nversion: \"2.0\"\n\nservices:\n  web:\n    image: yuravorobei/pancake-swap\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    web:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        web: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  web:\n    akash:\n      profile: web\n      count: 1\n```\n\nAlternatively, you can use cURL to download:\n\n```\ncurl -s https://raw.githubusercontent.com/ovrclk/awesome-akash/master/pancake-swap/deploy.yaml > deploy.yaml\n```\n\nYou may use the sample deployment file as-is or modify it for your own needs as desscribed in our [SDL (Stack Definition Language](https://docs.akash.network/documentation/sdl) documentation. \n\n{% hint style=\"warn\" %}\n\nPlease note if you are running on the testnet, you are limited in the amount of testnet resources you may request. \n\n{% endhint %}\n\nTo deploy on Akash, run:\n\n```sh\nakash tx deployment create deploy.yaml --from $KEY_NAME --node $AKASH_NODE --chain-id $AKASH_CHAIN_ID --fees 5000uakt -y\n```\n\nIn this step, you post your deployment, the Akash marketplace matches you with a provider via auction. To create a deployment use akash deployment. The syntax for the deployment is `akash tx deployment create <config-path> --from <key-name>`.\n\n\nYou can check the status of your lease by running:\n\n```\nakash query market lease list --owner $ACCOUNT_ADDRESS --node $AKASH_NODE --state active\n\n```\n\n```yaml\n- lease_id:\n    dseq: \"115884\"\n    gseq: 1\n    oseq: 1\n    owner: akash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n    provider: akash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0\n  price:\n    amount: \"51\"\n    denom: uakt\n  state: active\npagination:\n  next_key: null\n  total: \"0\"\n```\nIn the above example, we can see that a lease is created using for *51 uakt* or *0.0000051 AKT* per block to execute the container.\n\nFor convenience and clarity for future referencing, we can extract the below set of values to shell variables that we will be using to reference the deployment:\n\n| Attribute | Value |\n| --- | --- |\n| `PROVIDER` | `akash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0` |\n| `DSEQ` | `115884` |\n| `OSEQ` | `1` |\n| `GSEQ` | `1` |\n\nVerify we have the right values populated by running:\n\n```sh\necho $PROVIDER $DSEQ $OSEQ $GSEQ\n```\n\nYou should see a response similar to:\n\n```\nakash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0 115884 1 1\n```\n\nUpload the manifest using the values from above step:\n\n```sh\nakash provider send-manifest deploy.yaml --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --owner $ACCOUNT_ADDRESS --provider $PROVIDER \n```\n\nYour image is now deployed, once you uploaded the manifest. You can retrieve the access details by running the below:\n\n```sh\nakash provider lease-status --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --provider $PROVIDER --owner $ACCOUNT_ADDRESS\n```\n\nYou should see a response similar to:\n\n```json\n{\n  \"services\": {\n    \"web\": {\n      \"name\": \"web\",\n      \"available\": 1,\n      \"total\": 1,\n      \"uris\": [\n        \"phzz2bcjjoz7jhvderxo5d.provider1.akashdev.net\"\n      ],\n      \"observed-generation\": 0,\n      \"replicas\": 0,\n      \"updated-replicas\": 0,\n      \"ready-replicas\": 0,\n      \"available-replicas\": 0\n    }\n  },\n  \"forwarded-ports\": {}\n}\n```\n\nYou can access the application by visiting the hostnames mapped to your deployment. In above example, its http://phzz2bcjjoz7jhvderxo5d.provider1.akashdev.net\n\n## Service Logs\n\nYou can view the logs for your applicaiton using `akash provider service-logs`, for example:\n\n```sh\nakash provider service-logs --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --provider $PROVIDER --owner $ACCOUNT_ADDRESS --service web\n```\n\nYou should see a response similar to:\n\n```\n[web-7447d7769-c6t4f] yarn run v1.22.10\n[web-7447d7769-c6t4f] $ /workspace/node_modules/.bin/serve build\n[web-7447d7769-c6t4f] INFO: Accepting connections at http://localhost:5000\n```\n\n## Close your deployment\n\nWhen you are done with your application, close the deployment. This will deprovision your container and stop the token transfer. Close deployment using deployment by creating a `deployment-close` transaction:\n\n```sh\nakash tx deployment close --node $AKASH_NODE --chain-id $AKASH_CHAIN_ID --dseq $DSEQ --owner $ACCOUNT_ADDRESS --from $KEY_NAME -y --fees 5000uakt\n```\nAdditionally, you can also query the market to check if your lease is closed:\n\n```sh\nakash query market lease list --owner $ACCOUNT_ADDRESS --node $AKASH_NODE \n```\nYou should see a response similar to:\n\n```yaml\nleases:\n- lease_id:\n    dseq: \"115884\"\n    gseq: 1\n    oseq: 1\n    owner: akash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n    provider: akash1y8xhp9ekxctahvex7842h607lmwp50q0n89tw0\n  price:\n    amount: \"186\"\n    denom: uakt\n  state: closed\npagination:\n  next_key: null\n  total: \"0\"\n```\n","githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/pancake-swap"},{"name":"Augur","path":"augur","readme":"# Augur\n\nFrom [the project site](https://github.com/AugurProject/augur):\n\nAugur is a decentralized oracle and peer to peer protocol for prediction markets.\n","summary":"From the project site:\n\nAugur is a decentralized oracle and peer to peer protocol for prediction markets.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  augur:\n    image: augurproject/augur\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    augur:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        augur: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  augur:\n    akash:\n      profile: augur\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/augur"},{"name":"Bancor","path":"bancor","readme":"# Bancor\n\nFrom [Bancor Web App](https://github.com/bancorprotocol/webapp)\n\nOpen Source Token Swap and Pool Liquidity Portal\n\n\n","summary":"From Bancor Web App\n\nOpen Source Token Swap and Pool Liquidity Portal\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  bancor:\n    image: sueinz/bancor:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    bancor:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        bancor:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  bancor:\n    akash:\n      profile: bancor\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/bancor"},{"name":"Balancer","path":"balancer","readme":"# Balancer\n\nFrom [Balancer](https://github.com/balancer-labs/balancer-frontend)\n\nBalancer Exchange.\n","summary":"From Balancer\n\nBalancer Exchange.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  balancer:\n    image: stephendefi/balancer:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    balancer:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        balancer:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  balancer:\n    akash:\n      profile: balancer\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/balancer"},{"name":"Luaswap","path":"luaswap","readme":"# Luaswap\n\nFrom [Luaswap Homepage](https://github.com/tomochain/luaswap-homepage)\n\nThe homepage of Luaswap -- Multi-chain liquidity protocol for emerging token projects with no seed investment, founder's fees, or pre-mining.","summary":"From Luaswap Homepage\n\nThe homepage of Luaswap -- Multi-chain liquidity protocol for emerging token projects with no seed investment, founder's fees, or pre-mining.","deploy":"---\nversion: \"2.0\"\n\nservices:\n  luaswap:\n    image: minatofund/luaswap:v2\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    luaswap:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        luaswap: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  luaswap:\n    akash:\n      profile: luaswap\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/luaswap"},{"name":"SushiSwap","path":"sushiswap","readme":"# Sushiswap\n\nFrom [Sushiswap](https://github.com/sushiswap/sushiswap-classic-exchange)\n\nAn open source interface for sushiswap -- a protocol for decentralized exchange of Ethereum tokens. Deploy on akash decloud.\n\n\n\n","summary":"From Sushiswap\n\nAn open source interface for sushiswap -- a protocol for decentralized exchange of Ethereum tokens. Deploy on akash decloud.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  sushiswap:\n    image: fishflyhuang/sushiswap:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    sushiswap:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        sushiswap:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  sushiswap:\n    akash:\n      profile: sushiswap\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/sushiswap"},{"name":"Uma Protocol","path":"uma-protocol","readme":"Uma Protocol\n=======\n\nExpiring Multi Party is UMA's most current financial smart contract template. This UI is a community-made tool to make interfacing with the protocol easier, please use at your own risk.\n\n[GitHub repository](https://github.com/UMAprotocol/emp-tools)\n","summary":"Uma Protocol\n\nExpiring Multi Party is UMA's most current financial smart contract template. This UI is a community-made tool to make interfacing with the protocol easier, please use at your own ris...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  umaprotocol:\n    image: yuravorobei/uma-protocol\n    expose:\n      - port: 3000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    umaprotocol:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 2.5Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        umaprotocol: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  umaprotocol:\n    akash:\n      profile: umaprotocol\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/uma-protocol"},{"name":"Yearn.finance","path":"Yearn.finance","readme":"# ‚ÄéYearn.finance\n\nFrom [iearn-finance](https://github.com/iearn-finance/iearn-finance)\n\nDeploy Yearn.finance on akash decloud.\n\n\n","summary":"From iearn-finance\n\nDeploy Yearn.finance on akash decloud.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  yearn:\n    image: halw001/yearn:0.1\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    yearn:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        yearn: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  yearn:\n    akash:\n      profile: yearn\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/Yearn.finance"},{"name":"ThorChain BEPSwap","path":"Thorchain-BEPSwap","readme":"# Deploying ThorChain BEPSwap UI on Akash\n\nThis is a guide to containerizing [ThorChain BEPSwap Web UI](https://github.com/thorchain/bepswap-web-ui) and deploying on [Akash](https://akash.network) in a non-custodial way. Akash is a permissionless and censorship-resistant cloud network that guarantees sovereignty over your data and your applications. With Akash, you‚Äôre in complete control of all aspects of the life cycle of an application with no middleman.\n\nReadme is adapted from [Serum on Akash](https://github.com/ovrclk/serum-on-akash), which is an excellent guide to getting started with DeFi deployments on Akash DeCloud.\n\n## Before We Begin\n\nThis is a technical guide, best suited to a reader with basic Linux command line knowledge. The audience for this guide is intended for includes:\n\n- Application developers with little or no systems administration experience, wanting to deploy applications on the decentralized cloud.\n- System administrators with little or no experience with infrastructure automation, wanting to learn more.\n- Infrastructure automation engineers that want to explore decentralized cloud.\n- Anyone who wants to get a feel for the current state of the decentralized cloud ecosystem.\n\nYou will need the below setup before we being:\n\n1. Install Akash: Make sure to have Akash client installed on your workstation, check [install guide](https://docs.akash.network/guides/install) for instructions.\n2. Choose Your Akash Network: You'll need to know information about the network you're connecting your node to. See [Choosing a Network](https://docs.akash.network/guides/version) for how to obtain any network-related information.\n3. Fund Your Account: You'll need a AKT wallet with funds to pay for your deployment. See the [funding guide](https://docs.akash.network/guides/funding)\n   creating a key and funding your account.\n4. Install Docker: You'll need docker running on your workstation, follow this [guide](https://docs.docker.com/get-docker/) to setup Docker on your workstation..\n5. Setup Container Registry: To stage your containers to deploy onto Akash. We'll use Docker Hub in this guide. [Signup](https://docs.docker.com/docker-hub/) for a free Docker Hub account if you haven't.\n6. Setup Builpacks.io: Builpacks.io is a Cloud Native Buildpacks transform your application source code into images that can run on any cloud. Install `pack` tool using this [guide](https://buildpacks.io/docs/tools/pack/#install).\n\n### Set up your Environment\n\nWe will be using shell variables throughout this guide for convenience and clarity. Ensure you have the below set of variables defined on your shell, you can use `export VARNAME=...`:\n\n| Name              | Description                                                                                                         |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------- |\n| `AKASH_NODE`      | Akash network configuration base URL. See [here](/guides/version.md).                                               |\n| `AKASH_CHAIN_ID`  | Chain ID of the Akash network connecting to. See [here](/guides/version.md).                                        |\n| `ACCOUNT_ADDRESS` | The address of your account. See [here](/guides/wallet/README.md#account-address).                                  |\n| `KEY_NAME`        | The name of the key you will be deploying from. See [here](/guides/wallet/README.md) if you haven't yet setup a key |\n\nVerify you have correct `$AKASH_NODE`, that you have populated while [configuring the connection](/guides/version) using `export AKASH_NODE=$(curl -s \"$AKASH_NET/rpc-nodes.txt\" | shuf -n 1)`.\n\n```sh\necho $AKASH_NODE $AKASH_CHAIN_ID\n```\n\nYou should see a response similar to:\n\n```\ntcp://rpc-edgenet.akashdev.net:2665 akash-edgenet-1\n```\n\nYour values may differ depending on the network you're connecting to, `tcp://rpc-edgenet.akashdev.net:2665` and `akash-edgenet-1` are details for [edgenet](https://github.com/ovrclk/net/tree/master/edgenet).\n\nVerify you have the key set up and your account has sufficient balances, see the [funding guide](/guides/wallet/funding.md) otherwise:\n\nMy local key is named `alice`, the below command should return the name you've used:\n\n```sh\necho $KEY_NAME\n```\n\nThe above should return a response similar to:\n\n```\nalice\n```\n\nPopulate `ACCOUNT_ADDRESS` from `KEY_NAME` and verify:\n\n```sh\nexport ACCOUNT_ADDRESS=\"$(akash keys show $KEY_NAME -a)\"\n\necho $ACCOUNT_ADDRESS\n\nakash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n```\n\nCheck your account has sufficient balance by running:\n\n```sh\nakash query bank balances --node $AKASH_NODE $ACCOUNT_ADDRESS\n```\n\nYou should see a response similar to:\n\n```\nbalances:\n- amount: \"93000637\"\n  denom: uakt\npagination:\n  next_key: null\n  total: \"0\"\n```\n\nPlease note the balance indicated is is denominated in uAKT (AKT * 10^-6), in the above example, the account has a balance of *93 AKT\\*. We're now setup to deploy.\n\n## Build Thorchain BEPSwap UI Container\n\nThis setup is necessary for building the docker container. You can skip this step and process to deploying if you'd like deploy the existing container `edouardl/thorchain-bepswap-web-ui`\n\nGet the source code:\n\n```sh\ngit clone https://github.com/thorchain/bepswap-web-ui\ncd bepswap-web-ui\n```\n\nInstall dependencies using:\n\n```\nyarn install\n```\n\nAdd `serve` dependency using:\n\n```\nyarn add serve\n```\n\nCreate a `Procfile` to define the `web` process:\n\n```sh\ncat >Procfile<<EOF\nweb: yarn serve -s build\nEOF>>\n```\n\nWe will be using Heroku Buildpacks with Buildpack.io to build our container. First pick an image name and store it in `IMAGE` environment variable. I chose `edouardl/thorchain-bepswap-web-ui` as my image name, you should choose `<docker-id>/thorchain-bepswap-web-ui` as yours:\n\n```sh\nexport IMAGE=edouardl/thorchain-bepswap-web-ui\n```\n\nTo build the container, run:\n\n```sh\npack build $IMAGE --builder heroku/buildpacks:18\n```\n\nRun the docker image locally to verify it works:\n\n```sh\ndocker run -it --rm -e NODE_ENV=production -p 5000:5000 $IMAGE\n```\n\nVerify by visiting http://localhost:5000 on your browser.\n\nPush the image to Docker Hub (Container Registry) using:\n\n```\ndocker push $IMAGE\n```\n\n## Create the Deployment\n\nCreate a deployment configuration [thorchain.yaml](https://github.com/ovrclk/awesome-akash/blob/master/Thorchain-BEPSwap/deploy.yaml) to deploy the `edouardl/thorchain-bepswap-web-ui` for [ThorChain BEPSwap Web UI](https://github.com/thorchain/bepswap-web-ui) Node JS app container using [SDL](https://docs.akash.network/documentation/sdl):\n\n```sh\ncat > thorchain.yaml <<EOF\n---\nversion: \"2.0\"\n\nservices:\n  web:\n    image: edouardl/thorchain-bepswap-web-ui\n    expose:\n      - port: 5000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    web:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        web:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  web:\n    akash:\n      profile: web\n      count: 1\n\nEOF>>\n```\n\nYou may use the sample deployment file as-is or modify it for your own needs as desscribed in our [SDL (Stack Definition Language](https://docs.akash.network/documentation/sdl) documentation.\n\n{% hint style=\"warn\" %}\n\nPlease note if you are running on the testnet, you are limited in the amount of testnet resources you may request.\n\n{% endhint %}\n\nTo deploy on Akash, run:\n\n```sh\nakash tx deployment create thorchain.yaml --from $KEY_NAME --node $AKASH_NODE --chain-id $AKASH_CHAIN_ID --fees 5000uakt -y\n```\n\nIn this step, you post your deployment, the Akash marketplace matches you with a provider via auction. To create a deployment use akash deployment. The syntax for the deployment is `akash tx deployment create <config-path> --from <key-name>`.\n\nYou can check the status of your lease by running:\n\n```\nakash query market lease list --owner $ACCOUNT_ADDRESS --node $AKASH_NODE --state active\n\n```\n\n```yaml\n- lease_id:\n    dseq: \"160398\"\n    gseq: 1\n    oseq: 1\n    owner: akash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n    provider: akash1uu8wfvxscqt7ax89hjkxral0r2k73c6ee97dzn\n  price:\n    amount: \"51\"\n    denom: uakt\n  state: active\npagination:\n  next_key: null\n  total: \"0\"\n```\n\nIn the above example, we can see that a lease is created using for _51 uakt_ or _0.0000051 AKT_ per block to execute the container.\n\nFor convenience and clarity for future referencing, we can extract the below set of values to shell variables that we will be using to reference the deployment:\n\n| Attribute  | Value                                          |\n| ---------- | ---------------------------------------------- |\n| `PROVIDER` | `akash1uu8wfvxscqt7ax89hjkxral0r2k73c6ee97dzn` |\n| `DSEQ`     | `160398`                                       |\n| `OSEQ`     | `1`                                            |\n| `GSEQ`     | `1`                                            |\n\nVerify we have the right values populated by running:\n\n```sh\necho $PROVIDER $DSEQ $OSEQ $GSEQ\n```\n\nYou should see a response similar to:\n\n```\nakash1uu8wfvxscqt7ax89hjkxral0r2k73c6ee97dzn 160398 1 1\n```\n\nUpload the manifest using the values from above step:\n\n```sh\nakash provider send-manifest thorchain.yaml --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --owner $ACCOUNT_ADDRESS --provider $PROVIDER\n```\n\nYour image is now deployed, once you uploaded the manifest. You can retrieve the access details by running the below:\n\n```sh\nakash provider lease-status --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --provider $PROVIDER --owner $ACCOUNT_ADDRESS\n```\n\nYou should see a response similar to:\n\n```json\n{\n  \"services\": {\n    \"web\": {\n      \"name\": \"web\",\n      \"available\": 1,\n      \"total\": 1,\n      \"uris\": [\"300cl9s3ulbph244b6qqp6dkm0.provider3.akashdev.net\"],\n      \"observed-generation\": 0,\n      \"replicas\": 0,\n      \"updated-replicas\": 0,\n      \"ready-replicas\": 0,\n      \"available-replicas\": 0\n    }\n  },\n  \"forwarded-ports\": {}\n}\n```\n\nYou can access the application by visiting the hostnames mapped to your deployment. In above example, its http://300cl9s3ulbph244b6qqp6dkm0.provider3.akashdev.net\n\n## Service Logs\n\nYou can view the logs for your applicaiton using `akash provider service-logs`, for example:\n\n```sh\nakash provider service-logs --node $AKASH_NODE --dseq $DSEQ --oseq $OSEQ --gseq $GSEQ --provider $PROVIDER --owner $ACCOUNT_ADDRESS --service web\n```\n\nYou should see a response similar to:\n\n```\n[web-7447d7769-c6t4f] yarn run v1.22.10\n[web-7447d7769-c6t4f] $ /workspace/node_modules/.bin/serve build\n[web-7447d7769-c6t4f] INFO: Accepting connections at http://localhost:5000\n```\n\n## Close your deployment\n\nWhen you are done with your application, close the deployment. This will deprovision your container and stop the token transfer. Close deployment using deployment by creating a `deployment-close` transaction:\n\n```sh\nakash tx deployment close --node $AKASH_NODE --chain-id $AKASH_CHAIN_ID --dseq $DSEQ --owner $ACCOUNT_ADDRESS --from $KEY_NAME -y --fees 5000uakt\n```\n\nAdditionally, you can also query the market to check if your lease is closed:\n\n```sh\nakash query market lease list --owner $ACCOUNT_ADDRESS --node $AKASH_NODE\n```\n\nYou should see a response similar to:\n\n```yaml\nleases:\n  - lease_id:\n      dseq: \"160398\"\n      gseq: 1\n      oseq: 1\n      owner: akash1j8s87w3fctz7nlcqtkl5clnc805r240443eksx\n      provider: akash1uu8wfvxscqt7ax89hjkxral0r2k73c6ee97dzn\n    price:\n      amount: \"186\"\n      denom: uakt\n    state: closed\npagination:\n  next_key: null\n  total: \"0\"\n```\n","summary":"This is a guide to containerizing ThorChain BEPSwap Web UI and deploying on Akash in a non-custodial way. Akash is a permissionless and censorship-resistant cloud network that guarantees sovereignt...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  thorchain:\n    image: edouardl/thorchain-bepswap-thorchain-ui\n    expose:\n      - port: 5000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    thorchain:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        thorchain:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  thorchain:\n    akash:\n      profile: thorchain\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/Thorchain-BEPSwap"},{"name":"Curve","path":"curve","readme":"Curve UI\n=======\n\n# Curve Finance UI\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/curvefi/curve-ui/feature/add-info/assets/curve-image.jpeg\" />\n</p>\n\n## What is Curve?\nCurve is an exchange liquidity pool on Ethereum (like Uniswap) designed for (1) extremely efficient stablecoin trading (2) low risk, supplemental fee income for liquidity providers, without an opportunity cost.\n\nCurve allows users (and smart contracts like 1inch) to trade between DAI and USDC with a bespoke low slippage, low fee algorithm designed specifically for stablecoins. Behind the scenes, the liquidity pool is supplied to the Compound protocol, where it generates income for liquidity providers.\n\nMore details [curve-ui](https://github.com/curvefi/curve-ui)\n","summary":"Curve UI\n\nCurve Finance UI\n\nWhat is Curve?\nCurve is an exchange liquidity pool on Ethereum (like Uniswap) designed for (1) extremely efficient stablecoin trading (2) low risk, supplemental fee inco...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  curve:\n    image: davaymne/curve-ui:latest \n    expose:\n      - port: 8000 \n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    curve:\n      resources:\n        cpu:\n          units: 0.1 \n        memory:\n          size: 512Mi\n        storage:\n          size: 2.5Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        curve: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  curve:\n    akash:\n      profile: curve\n      count: 1 \n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/curve"},{"name":"Synthetix.Exchange","path":"synthetix.exchange","readme":"# Synthetix.Exchange\n\nThe code for the [Synthetix.Exchange](https://synthetix.exchange) dApp.<br />\nIt is powered by [synthetix-data](https://github.com/Synthetixio/synthetix-data) and [synthetix-js](https://github.com/Synthetixio/synthetix-js).\n\n# Instructions\n\nFirst of all you need to create docker image and push it to docker hub.\n\n1. Build the project\n    * `npm i`\n    * `npm run build`\n2. Make a container and an image based on `nginx:stable-alpine`\n3. Push to the docker hub\n4. Modify `deploy.yaml` to use your image\n","summary":"The code for the Synthetix.Exchange dApp.\nIt is powered by synthetix-data and synthetix-js.\n\nInstructions\n\nFirst of all you need to create docker image and push it to docker hub.\n\nBuild the project...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  synthetix:\n    image: selchenkov/synthetix.exchange:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    synthetix:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        synthetix:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  synthetix:\n    akash:\n      profile: synthetix\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/synthetix.exchange"},{"name":"Ren Protocol","path":"renprotocol","readme":"# Ren Protocol\n\nFrom [Ren Protocol](https://github.com/renproject/bridge)\n\nThe easy and permission-less way to bring cross-chain assets to Ethereum.\n\n\n","summary":"From Ren Protocol\n\nThe easy and permission-less way to bring cross-chain assets to Ethereum.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  renprotocol:\n    image: fishflyhuang/renprotocol\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    renprotocol:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        renprotocol:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  renprotocol:\n    akash:\n      profile: renprotocol\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/renprotocol"},{"name":"yfii","path":"yfii","readme":"# YFII\n\nFrom [YFII](https://github.com/yfii/dfi)\n\nYFII is a fork of YFI project with YIP-8 implementation.\n\n\n","summary":"From YFII\n\nYFII is a fork of YFI project with YIP-8 implementation.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  yfii:\n    image: fishflyhuang/yfii\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    yfii:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        yfii:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  yfii:\n    akash:\n      profile: yfii\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/yfii"},{"name":"Sifchain DEX","path":"sifchain-ui","readme":"# Sifchain-ui container\n\nRunning Sifchain-UI DEX on Akash.\n\n## Motivation\n\nI've noticed [Sifchain DEX](https://dex.sifchain.finance) is running slow sometimes and realized why not to host my own copy of [Sifchain-UI](https://github.com/Sifchain/sifchain-ui) since it's open source?\n\nAnd then it helps its decentralization! :-)\n\n## Features\n\n- [Dockerfile](https://github.com/ovrclk/awesome-akash/blob/master/sifchain-ui/./Dockerfile) produces a tiny 47MB image which is super quick to deploy;\n- [Makefile](https://github.com/ovrclk/awesome-akash/blob/master/sifchain-ui/./Makefile) lets you quickly test and use the image locally!\n\n## Notes on TLS\n\nWhilst `localhost`, `127.0.0.0/8` addresses are not restricted (which makes testing easy), browsers deny using HTTPS resources (e.g. Sifchain/Keplr `rpcUrl` addresses) from a non-HTTP's page.\n\nThis container generates a self-signed TLS certificate, so you can access your deployment over a nodePort mapped to 443/tcp in the container. To find it use `akash provider lease-status ...` command.\nIt will work, but you will have to accept a self-signed certificate.\n\nOr you can terminate TLS elsewhere, e.g. https://www.youtube.com/watch?v=HDNPABvkmG0\n\n# Running Sifchain UI DEX in Akash or locally\n\n## Dependencies\n\nInstall `make` and [docker](https://docs.docker.com/engine/install/).\n\n## My image\n\nTo use my image just deploy the `deploy.yaml` file on Akash.\n\n## Own image\n\nIf you want to build your own image then follow these steps:\n\n**Setup:**\n\n1. Register an account at the Docker Hub https://hub.docker.com\n2. Run `docker login` to login with your Docker Hub account\n3. Set `ns` variable in `Makefile` to your Docker Hub account\n\n**Build:**\n\n1. Run `make` to build & push your image to your Docker Hub\n2. Now you can deploy `deploy.yaml` on Akash!\n\n> `make` automatically sets `image` to yours in `deploy.yaml`\n\n# Help\n\n```\nmake             - runs build push update-sdl clean stages\nmake build       - builds the docker image\nmake test        - runs the docker image locally, access Sifchain over http://127.0.0.1:8080\nmake push        - pushes the docker image to https://hub.docker.com\nmake update-sdl  - update `image` in `deploy.yaml` file\nmake clean       - removes old images (keeps last two)\n```\n\n# Links\n\n- https://sifchain.finance\n- https://dex.sifchain.finance\n- https://github.com/Sifchain/sifchain-ui\n\n","summary":"Running Sifchain-UI DEX on Akash.\n\nMotivation\n\nI've noticed Sifchain DEX is running slow sometimes and realized why not to host my own copy of Sifchain-UI since it's open source?\n\nAnd then it helps...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  sifchain-ui:\n    image: andrey01/sifchain-ui:168db086-2022-02-03-1643882124\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n      - port: 443\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    sifchain-ui:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        sifchain-ui:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  sifchain-ui:\n    akash:\n      profile: sifchain-ui\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/sifchain-ui"}]},{"title":"Blockchain","templates":[{"name":"Substrate Node","path":"substrate-node","readme":"# Substrate Node\n\nA fresh FRAME-based Substrate node, ready for hacking rocket :rocket:\n\n## Docker images\n\n* [ubinix5warun/substrate-node:v3-dev](https://hub.docker.com/layers/166944139/ubinix5warun/substrate-node/v3-dev/images/sha256-a2561b52172e902d4d63b265ba3379b53b633fc1b4289e3ed15ad35aa1146fde?context=repo)\n    * [Dockerfile](https://github.com/ubinix-warun/substrate-node-template/blob/gr11-hackathon/container/Dockerfile)\n    * [Build images](https://github.com/ubinix-warun/substrate-node-template/blob/gr11-hackathon/build-image.sh)\n\n## Connect to WebSocket\n\nFound host and externalPort from akask, use socat to proxy.\n\n```\nakash provider lease-status --node $AKASH_NODE --home ~/.akash --dseq $AKASH_DSEQ --from $AKASH_KEY_NAME --provider $AKASH_PROVIDER\n\n...\n\"forwarded_ports\": {\n    \"web\": [\n      {\n        \"host\": \"cluster.provider-0.prod.ams1.akash.pub\",\n        \"port\": 9944,\n        \"externalPort\": 30190,\n      ....\n}\n```\n\n```\nsocat TCP-LISTEN:9944,fork TCP:cluster.provider-0.prod.ams1.akash.pub:30190\n```","summary":"A fresh FRAME-based Substrate node, ready for hacking rocket :rocket:\n\nDocker images\n\nubinix5warun/substrate-node:v3-dev\n    Dockerfile\n    Build images\n\nConnect to WebSocket\n\nFound host and extern...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  substrate:\n    image: ubinix5warun/substrate-node:v3-dev\n    expose:\n      - port: 9944\n        as: 9944\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    substrate:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        substrate: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  substrate:\n    akash:\n      profile: substrate\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/substrate-node"},{"name":"Vidulum","path":"vidulum","readme":"## vidulum is a blockchain built using Cosmos SDK and Tendermint and created with Starport\n\nThe default image is exposing RPC API, if that's not something you want to, make sure to remove `26657` from the deploy.yaml file.\n\nBy default, the image is setting the moniker to the container name, use `vidulumd start --help` in order to see what you can customize should you need to.\n\nIf you plan to register a validator, make sure you back-up the `priv_validator_key.json` & `node_key.json` in the `/root/.vidulum/config` directory.\n\n- https://github.com/vidulum/mainnet\n","summary":"The default image is exposing RPC API, if that's not something you want to, make sure to remove 26657 from the deploy.yaml file.\n\nBy default, the image is setting the moniker to the container name,...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  vidulumd:\n    image: andrey01/vidulumd:1.0.0\n    expose:\n      - port: 26656\n        proto: tcp\n        to:\n          - global: true\n      - port: 26657\n        as: 80\n        proto: tcp\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    vidulumd:\n      resources:\n        cpu:\n          units: 2.0\n        memory:\n          size: 4Gi\n        storage:\n          size: 200Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        vidulumd:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  vidulumd:\n    akash:\n      profile: vidulumd\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/vidulum"},{"name":"Akash archive node","path":"akash-archive-node","category":"Blockchain","summary":"Example of how to run an Akash node on the Akash network.","githubUrl":"https://github.com/tombeynon/akash-archive-node","deploy":"---\nversion: \"2.0\"\nservices:\n  akash:\n    image: tombeynon/akash-archive-node:0.12.1\n    env:\n      - AKASH_MONIKER=my-node-name\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n      - port: 26656\n        to:\n          - global: true\n      - port: 26657\n        to:\n          - global: true\n      - port: 1317\n        to:\n          - global: true\n      - port: 9090\n        to:\n          - global: true\nprofiles:\n  compute:\n    akash:\n      resources:\n        cpu:\n          units: 1\n        memory:\n          size: 2Gi\n        storage:\n          size: 32Gi\n  placement:\n    dcloud:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\n      pricing:\n        akash:\n          denom: uakt\n          amount: 100\ndeployment:\n  akash:\n    dcloud:\n      profile: akash\n      count: 1","readme":"# Akash Archive Node\n\nExample of how to run an Akash node as per [the documentation](https://docs.akash.network/guides/node). \n\nDue to the Akash mainnet-2 upgrade, you need to download the blockchain from a snapshot or with statesync, otherwise it errors at block 968. We use this [snapshot service](https://github.com/c29r3/cosmos-snapshots) thanks to @c29r3 to do this as part of the entrypoint.sh script.\n\nThis will be replaced by [ovrclk/cosmos-omnibus](https://github.com/ovrclk/cosmos-omnibus) ASAP and is just an example of how to run the node on Akash and install the snapshot.\n"}]},{"title":"Bussiness","description":" ","templates":[{"name":"Odoo","path":"odoo","readme":"Odoo\n=======\nOdoo is a suite of open source business apps that cover all your company needs: CRM, eCommerce, accounting, inventory, point of sale, project management, etc.\n\nOdoo's unique value proposition is to be at the same time very easy to use and fully integrated.\n\nMore details [https://www.odoo.com/](https://www.odoo.com/)\n","summary":"Odoo\n\nOdoo is a suite of open source business apps that cover all your company needs: CRM, eCommerce, accounting, inventory, point of sale, project management, etc.\n\nOdoo's unique value proposition...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  db:\n    image: postgres:latest\n    expose:\n      - port: 5432\n        proto: tcp\n        to:\n          - service: odoo\n    env:\n      - POSTGRES_PASSWORD=odoo\n      - POSTGRES_USER=odoo\n      - POSTGRES_DB=postgres\n      \n  odoo:\n    image: odoo:latest\n    depends_on:\n      - db\n    expose:\n      - port: 8069\n        to:\n          - global: true\n    # tty: true\n    env:\n      - HOST=db\n      - USER=odoo\n      - PASSWORD=odoo\n\nprofiles:\n  compute:\n    db:\n      resources:\n        cpu:\n          units: 1 \n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n    odoo:\n      resources:\n        cpu:\n          units: 1 \n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    westcoast:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        db: \n          denom: uakt\n          amount: 100\n        odoo: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  db:\n    westcoast:\n      profile: db\n      count: 1 \n  odoo:\n    westcoast:\n      profile: odoo\n      count: 1 \n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/odoo"}]},{"title":"Games","templates":[{"name":"Minecraft","path":"minecraft","readme":"# Akash Minecraft\n\nLaunch a Minecraft server on the Akash blockchain. It can be easily configured with only changes to deploy.yaml, and supports any Minecraft version, including multiple modded server types.\n\nA default vanilla configuration is included, and this is ready to run out-of-the-box.\n\nFor an even easier one-liner deployment, see the deployment script repository at https://github.com/slowriot/akash_minecraft.\n\n# Configuration\n## deploy.yaml\nThe simplest way to configure your Minecraft server is through environment variables; just edit `deploy.yaml` prior to deploying, looking at the `env` block: https://github.com/slowriot/akash_minecraft/blob/master/deploy.yaml#\n\nThe default variables are minimal:\n- FORCE_REDOWNLOAD=true\n- EULA=TRUE\n- VERSION=latest\n- SERVER_NAME=AkashMinecraft\n- MEMORY=4G\n- MAX_PLAYERS=10\n\n### Common configuration adjustments\nIf you wish to run a different version of the game, simply state the version in the `VERSION=...` variable.  This can be set to `LATEST`, `SNAPSHOT`, or a numerical version such as `1.7.10`.\n\nDifficulty can be adjusted with settings like `DIFFICULTY=hard`, `HARDCORE=true`.  Server name is self-explanatory.  Op and whitelist players can be listed with `OPS=user1,user2` and `WHITELIST=user1,user2`.  The default maximum number of players is 20, if no value is specified in environment variables, and the default for this configuration is 10 to match the performance settings below - feel free to experiment with this.  A full list of variabels can be found in the container's documentation at https://github.com/slowriot/docker-minecraft-server#server-configuration.\n\n### Mods\nYou can run a modded server by specifying `TYPE=FORGE`, `TYPE=BUKKIT`, `TYPE=SPIGOT`, `TYPE=PAPER`, etc.  Mod packs can be added in different ways depending on the framework - for example, for Spigot use `SPIGET_RESOURCES=9089,34315` where the numbers are resource IDs, and for Forge, Bukkit etc you can use `MODPACK=http://www.example.com/mods/modpack.zip`.  For detailed instructions on managing mods, see the link to the Minecraft server container documentation at the end of this page.\n\n### Adjusting container performance\nConfiguring the performance of the server can also be done by editing `deploy.yaml` prior to deploying.  The default settings attempt to offer good performance while offering the cheapest costs, and should be adequate for up to 10 players.  It is easy to adjust these settings for your particular needs.\n\nIf you want to adjust your memory usage - either to increase it in order to accomodate more players, or to reduce it in order to reduce deployment cost - you need to alter it in two places.  By default, `MEMORY=4G` instructs the Minecraft server itself to use a maximum of 4GB of RAM, and `memory: size: 5Gi` specifies the maximum memory for the container it runs in.  The memory for the container should always be larger than the memory configured for the game, but you can experiment with how big a gap you need between the two.\n\nDefault CPU usage is configured as 1.5 - that's one-and-a-half cores, which seems to work well for vanilla Minecraft, which at the time of writing is still largely single-threaded.  If you find server performance could be better (for example if you are using a lot of redstone, or have a lot of mobs on the server), you may want to raise this - and the cost of the deployment may rise slightly as a result.\n\n# Minecraft configuration\nFor more detailed information on configuring the Minecraft docker image, including how to enable mod support, see the docker container's documentation at https://github.com/slowriot/docker-minecraft-server#readme.  Wherever an environment variable is given with `-e VARIABLE=VALUE`, just insert `VARIABLE=...` under the `env` section of `deploy.yaml`.\n\n# Easier deployment\nIf you do not wish to manage your deployment manually, you can use the deployment script repository at https://github.com/slowriot/akash_minecraft - this will deploy the server to Akash with a single command, automatically selecting the lowest bidder, and providing you with links to the server and the log streams.\n","summary":"Launch a Minecraft server on the Akash blockchain. It can be easily configured with only changes to deploy.yaml, and supports any Minecraft version, including multiple modded server types.\n\nA defau...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  web:\n    image: slowriot/minecraft-server\n    expose:\n      - port: 25565\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - FORCE_REDOWNLOAD=true\n      - EULA=TRUE\n      - VERSION=LATEST\n      - SERVER_NAME=AkashMinecraft\n      - MEMORY=4G\n      - MAX_PLAYERS=10\n\nprofiles:\n  compute:\n    web:\n      resources:\n        cpu:\n          units: 1.5\n        memory:\n          size: 5Gi\n        storage:\n          size: 8Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        web:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  web:\n    akash:\n      profile: web\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/minecraft"},{"name":"Tetris","path":"tetris","readme":"# Game Tetris\n\nTetris (Russian: –¢–µ—Ç—Ä–∏—Å [Ààt…õtr ≤…™s]) is a tile-matching video game created by Russian software engineer Alexey Pajitnov in 1984.\nIt has been published by several companies, most prominently during a dispute over the appropriation of the rights in the late 1980s.\n","summary":"Tetris (Russian: –¢–µ—Ç—Ä–∏—Å [Ààt…õtr ≤…™s]) is a tile-matching video game created by Russian software engineer Alexey Pajitnov in 1984.\nIt has been published by several companies, most prominently during a...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  tetris:\n    image: bsord/tetris\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    tetris:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        tetris:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  tetris:\n    akash:\n      profile: tetris\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/tetris"},{"name":"Pac-Man","path":"pacman","readme":"Pac-Man Game\n=======\n\nPac-Man is a maze chase video game; the player controls the eponymous character through an enclosed maze. The objective of the game is to eat all of the dots placed in the maze while avoiding four colored ghosts ‚Äî Blinky (red), Pinky (pink), Inky (cyan), and Clyde (orange) ‚Äî that pursue him. When all of the dots are eaten, the player advances to the next level. If Pac-Man makes contact with a ghost, he will lose a life; the game ends when all lives are lost.\n\nThis is accurate remake of the original game. The Docker image built from [this](https://github.com/masonicGIT/pacman) GitHub repository.\n","summary":"Pac-Man Game\n\nPac-Man is a maze chase video game; the player controls the eponymous character through an enclosed maze. The objective of the game is to eat all of the dots placed in the maze while ...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  pacman:\n    image: yuravorobei/pacman-pacman\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    pacman:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        pacman: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  pacman:\n    akash:\n      profile: pacman\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/pacman"},{"name":"Supermario","path":"supermario","readme":"Supermario  Game\n=======\nThe Super Mario games follow Mario's adventures, typically in the fictional Mushroom Kingdom with Mario as the player character.\n","summary":"Supermario  Game\n\nThe Super Mario games follow Mario's adventures, typically in the fictional Mushroom Kingdom with Mario as the player character.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  supermario:\n    image: pengbai/docker-supermario \n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    supermario:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        supermario: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  supermario:\n    akash:\n      profile: supermario\n      count: 1\n\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/supermario"},{"name":"Minesweeper","path":"minesweeper","readme":"# Game Minesweeper\n\nMinesweeper is a clone of one of the most popular classic game fully written on react.js.\n","summary":"Minesweeper is a clone of one of the most popular classic game fully written on react.js.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  minesweeper:\n    image: creepto/minesweeper\n    expose:\n      - port: 3000\n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    minesweeper:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        minesweeper: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  minesweeper:\n    akash:\n      profile: minesweeper\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/minesweeper"},{"name":"Tetris2","path":"tetris2","readme":"# Tetris\n\nA simple javascript tetris game \n\n","summary":"A simple javascript tetris game\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  tetris:\n    image: uzyexe/tetris\n    expose:\n      - port: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    tetris:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        tetris:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  tetris:\n    akash:\n      profile: tetris\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/tetris2"},{"name":"MemoryGame","path":"MemoryGame","readme":"AKASH CHALLENGER WEEK 2\n\nDEPLOY APP TO AKASH\n\n","summary":"AKASH CHALLENGER WEEK 2\n\nDEPLOY APP TO AKASH\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  memorygame:\n    image: jungpilyu/memorygame\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    memorygame:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 2Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        memorygame: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  memorygame:\n    akash:\n      profile: memorygame\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/MemoryGame"},{"name":"DOOM","path":"doom","readme":"DOOM\n=======\n\nIt runs DOOM.\n\nImage built from [KasmVNC doom example container](https://github.com/kasmtech/KasmVNC/tree/master/docker).\n\nAccess by browsing to http://deployment-url:port/vnc.html and inputting the username and password specified in the SDL file.\n","summary":"DOOM\n\nIt runs DOOM.\n\nImage built from KasmVNC doom example container.\n\nAccess by browsing to http://deployment-url:port/vnc.html and inputting the username and password specified in the SDL file.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  doom:\n    image: raviforbole/doom:akash\n    env:\n      - \"VNC_USER=akash\"\n      - \"VNC_PW=decloud\"\n    expose:\n      - port: 8443\n        as: 8443\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    doom:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 0.5Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        doom:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  doom:\n    akash:\n      profile: doom\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/doom"},{"name":"Snake Game","path":"snake-game","readme":"# Snake Game\n\nA simple javascript snake game \nsaves scores of players in database(mongoDB) and computes rank of player.  \n\n\n","summary":"A simple javascript snake game\nsaves scores of players in database(mongoDB) and computes rank of player.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  mongo:\n    image: library/mongo:latest\n    expose:\n      - port: 27017\n        as: 27017\n        to:\n          - service: mongo\n  snake:\n    image: harish1551/snake-game:latest\n    env:\n      - DB_HOST=mongo\n    depends_on:\n      - mongo\n    expose:\n      - port: 8000\n        as: 80\n        to:\n          - global: true\n        accept:\n          - snakegame.smartwave.tk\n\nprofiles:\n  compute:\n    snake:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1G\n    mongo:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 128Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        snake: \n          denom: uakt\n          amount: 100\n        mongo: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  snake:\n    akash:\n      profile: snake\n      count: 1\n  mongo:\n    akash:\n      profile: mongo\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/snake-game"}]},{"title":"Hosting","templates":[{"name":"Caddy","path":"caddy","readme":"Caddy\n=======\nCaddy 2 is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go.\n\nMore details [https://caddyserver.com/](https://caddyserver.com/)\n","summary":"Caddy\n\nCaddy 2 is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go.\n\nMore details https://caddyserver.com/\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  caddy:\n    image: stefanprodan/caddy \n    expose:\n      - port: 80 \n        to:\n          - global: true\nprofiles:\n  compute:\n    caddy:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        caddy: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  caddy:\n    akash:\n      profile: caddy\n      count: 1 \n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/caddy"},{"name":"Grafana","path":"grafana","readme":"Grafana\n=======\nGrafana has become the world‚Äôs most popular technology used to compose observability dashboards with everything from Prometheus & Graphite metrics, to logs and application data to power plants and beehives.\nMore details [https://grafana.com/](https://grafana.com/)\n","summary":"Grafana\n\nGrafana has become the world‚Äôs most popular technology used to compose observability dashboards with everything from Prometheus & Graphite metrics, to logs and application data to power pl...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  grafana:\n    image: grafana/grafana \n    expose:\n      - port: 3000 \n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    grafana:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        grafana: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  grafana:\n    akash:\n      profile: grafana\n      count: 1 \n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/grafana"},{"name":"IPFS","path":"ipfs","readme":"# IPFS - InterPlanetary File System\r\nThe InterPlanetary File System (IPFS) is a protocol and peer-to-peer network for storing and sharing data in a distributed file system. IPFS uses content-addressing to uniquely identify each file in a global namespace connecting all computing devices. \r\n(Source: [Wikipedia](https://en.wikipedia.org/wiki/InterPlanetary_File_System))\r\n\r\n\r\n## Setup\r\nAfter deploying the container the web ui will be accessible at port 80. However you will need to enter the IPFS API URL there to make it work. The IPFS API runs on port 5001, but AKASH publishes a random port and then forwards it to port 5001. With the lease-status command you have to look which port is forwarded under \"forwarded_ports\". Then enter the following as IPFS API URL `http://host:port` (ex: http://cluster.ews1p0.mainnet.akashian.io:30328).","summary":"IPFS - InterPlanetary File System\nThe InterPlanetary File System (IPFS) is a protocol and peer-to-peer network for storing and sharing data in a distributed file system. IPFS uses content-addressin...","deploy":"---\r\nversion: \"2.0\"\r\n\r\nservices:\r\n  ipfs:\r\n    image: linuxserver/ipfs:version-v2.12.4\r\n    expose:\r\n      - port: 80\r\n        as: 80\r\n        to:\r\n          - global: true\r\n      - port: 4001\r\n        as: 4001\r\n        to:\r\n          - global: true\r\n      - port: 5001\r\n        as: 5001\r\n        to:\r\n          - global: true\r\n      - port: 8080\r\n        as: 8080\r\n        to:\r\n          - global: true\r\n\r\nprofiles:\r\n  compute:\r\n    ipfs:\r\n      resources:\r\n        cpu:\r\n          units: 2.0\r\n        memory:\r\n          size: 4Gi\r\n        storage:\r\n          size: 1Gi\r\n  placement:\r\n    akash:\r\n      attributes:\r\n        host: akash\r\n      signedBy:\r\n        anyOf:\r\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\r\n      pricing:\r\n        ipfs:\r\n          denom: uakt\r\n          amount: 100\r\n\r\ndeployment:\r\n  ipfs:\r\n    akash:\r\n      profile: ipfs\r\n      count: 1\r\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/ipfs"}]},{"title":"Machine Learning","templates":[{"name":"Jupyter Notebook","path":"jupyter","readme":"# Jupyter Notebook\n\nThe `deploy.yaml` deploys a [Jupyter notebook](https://jupyter.org/) environment, which is a popular user interface for data scientists today. More specifically, the `deploy.yaml` specifies the `jupyter/tensorflow-notebook` image that includes popular Python deep learning libraries, but one can easily swap it out with the various Jupyter environment images provided by [Jupyter Docker Stacks](https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html).\n\n## Usage\nOnce deployed, the Jupyter notebook can be accessed at `http:<HOSTED URI>`. To obtain the access token, you would need to view the provider lease logs (i.e. via the CLI `akash provider lease-logs` command), and paste it into the input to authenticate.","summary":"The deploy.yaml deploys a Jupyter notebook environment, which is a popular user interface for data scientists today. More specifically, the deploy.yaml specifies the jupyter/tensorflow-notebook ima...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  jupyter:\n    # There are many other Jupyter images you can choose from here: https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html\n    image: jupyter/tensorflow-notebook\n    expose:\n      - port: 8888\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    jupyter:\n      resources:\n        cpu:\n          units: 2.0\n        memory:\n          size: 2Gi\n        storage:\n          size: 10Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        jupyter: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  jupyter:\n    akash:\n      profile: jupyter\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/jupyter"}]},{"title":"Media","templates":[{"name":"FreeFlix Nucleus","path":"freeflix-nucleus","readme":"# FreeFlix Nucleus\n\n*FreeFlix Nucleus* is a publishing platform that enables creators and organizations to publish content and engage with their audience.\n\n*FreeFlix Nucleus* is powered by *FreeFlix Studio* which is a tool to manage, distribute and monetize media across platforms (FreeFlix Nucleus, YouTube, Twitch, etc.) and also across various blockchain networks as **Media NFTs**.\n\nBoth *FreeFlix Nucleus* and *FreeFlix Studio* run on **flixnet-1**, the first private testnet of the **FreeFlix Media Hub**\n","summary":"FreeFlix Nucleus is a publishing platform that enables creators and organizations to publish content and engage with their audience.\n\nFreeFlix Nucleus is powered by FreeFlix Studio which is a tool ...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  ffnucleus:\n    image: harish1551/ff_nucleus:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n        accept:\n          - dcloud.nucleus.freeflix.live\n\nprofiles:\n  compute:\n    ffnucleus:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        ffnucleus: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  ffnucleus:\n    akash:\n      profile: ffnucleus\n      count: 1\n\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/freeflix-nucleus"}]},{"title":"Metasearch Engine","templates":[{"name":"Whoogle Search","path":"whoogle-search","readme":"# Whoogle Search\n\nWhoogle Search is a self-hosted, ad-free/AMP-free/tracking-free, privacy respecting alternative to Google Search. It works by sitting between the user and Google, and filtering whatever Google returns back, to remove things like ads/sponsored content, cookies, JavaScript, tags on urls related to ad campaigns and site referrals, etc. Since all queries are forwarded through the Akash provider, the query made to Google only contains the IP address and information of the provider rather than the user's. And because it's easy to redeploy to a different provider on Akash, users can rotate providers once in a while to further obfuscate. To learn more about the project, see the original project page on [Github](https://github.com/benbusby/whoogle-search) and this [reddit post](https://www.reddit.com/r/selfhosted/comments/ggronz/whoogle_search_a_selfhosted/) from the author.\n\n![Whoogle](https://raw.githubusercontent.com/ovrclk/awesome-akash/master/whoogle-search/whoogle.png)\n\n## Deployment Configuration\nThe provided [`deploy.yaml`](https://github.com/ovrclk/awesome-akash/blob/master/whoogle-search/deploy.yaml) (and [`deploy-ssh-tunnel.yaml`](https://github.com/ovrclk/awesome-akash/blob/master/whoogle-search/deploy-ssh-tunnel.yaml)) is a sample SDL configuration that directly uses the official [benbusby/whoogle-search](https://hub.docker.com/r/benbusby/whoogle-search) DockerHub image. As such, the enviornment variables that the original image supports can also be specified in the SDL; the provided one shows how one can enable basic HTTP authentication by specifying the `WHOOGLE_USER` and `WHOOGLE_PASS` variables. Consult the project's [Github](https://github.com/benbusby/whoogle-search) for the full list of supported environment variables.\n\n## `deploy-ssh-tunnel.yaml`?\nBy default, the Akash deployment is accessible through HTTP only, so traffic between the user and the hosted Whoogle is unencrypted. Thus, it's recommended to enabled HTTPS. One way to do so is to use a custom domain with CloudFlare SSL as described in this [guide](https://teeyeeyang.medium.com/how-to-use-a-custom-domain-with-your-akash-deployment-5916585734a2) written by a community member.\n\nHowever, if this is for personal use only, it's also possible to utilize a SSH tunnel in lieu of HTTPS to establish an encyrpted connection between the user and the hosted Whoogle. The [`deploy-ssh-tunnel.yaml`](https://github.com/ovrclk/awesome-akash/blob/master/whoogle-search/deploy-ssh-tunnel.yaml) is configured to enable SSH tunneling, with the option to use password based or key based (generally safer) authentication through setting environment variables. Once deployed, you can establish the SSH tunnel with:\n\n```\nssh -p <THE FORWARDED EXTERNAL PORT OF 2222> -N -L 5000:web:5000 <USER_NAME>@<PROVIDER HOST>\n```\n\nAnd visit Whoogle by going to `http://localhost:5000` in your browser!","summary":"Whoogle Search is a self-hosted, ad-free/AMP-free/tracking-free, privacy respecting alternative to Google Search. It works by sitting between the user and Google, and filtering whatever Google retu...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  whoogle:\n    image: benbusby/whoogle-search:latest\n    # See https://github.com/benbusby/whoogle-search for full list of supported environment variables\n    env:\n      - WHOOGLE_USER=user\n      - WHOOGLE_PASS=password\n    expose:\n      - port: 5000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    whoogle:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        whoogle: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  whoogle:\n    akash:\n      profile: whoogle\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/whoogle-search"}]},{"title":"Mining","templates":[{"name":"xmrig","path":"monero","readme":"# Why use Akash?\n\nWelcome [xmrig](https://xmrig.com/) and [Monero](https://getmonero.org) miners! [Akash](https://akash.network) is a decentralized marketplace of compute with thousands of CPU's ready for small and large deployments.  xmrig mining can be deployed on the network successfully using this guide.  Akash is a part of the [Cosmos](https://cosmos.network/) ecosystem of blockchains.\n\n# Windows/Linux/Mac Users\n\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) wallet as a browser plugin\n2. Install [Akashlytics](https://akashlytics.com/deploy) and import your AKT wallet address from Keplr.\n3. [Fund your wallet](#Quickest-way-to-get-more-AKT)\n\nFor additional help we recommend you [follow our full deployment guide](https://docs.akash.network/guides/deploy) in parallel with this guide.\n\n# How does this work?\nAkash uses its blockchain to manage your container deployment and accounting.  To deploy on Akash you will need to fund your wallet with at least 10 AKT (~$20)  Each time you create a deployment, 5 AKT will be used for escrow and to fund the deployment.  If the deployment is cancelled the balance of the escrow is returned to you.  You can spin up deployments without worrying about any long term contracts and you can cancel anytime.\n\n# Default wallet\nAkash uses [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) as the desktop wallet.  Advanced users can follow the [CLI instructions](https://docs.akash.network/guides/cli)\n\n# Quickest way to get more AKT\nTo fund your deployment you will need AKT in your account.  The fastest way to do that is as follows:\n\n## Buy on an Exchange\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Buy AKT on an [exchange](https://www.coingecko.com/en/coins/akash-network#markets)\n3. Withdraw your AKT to your Keplr wallet.\n\n## Swap from `ATOM` to `AKT`\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Send 10 ATOM to your new Cosmos wallet address inside Keplr (this address will start with `cosmos`)\n3. Goto [Osmosis Assets](https://app.osmosis.zone/assets) > next to `Cosmos Hub - ATOM` click on `Deposit`\n   This step deposits ATOM from your Keplr wallet onto the Osmosis platform.\n5. Now go back to [Osmosis Homepage](https://app.osmosis.zone/assets) and select `ATOM > AKT` to complete the swap\n   This step swaps your ATOM you deposited onto the Osmosis platform into any other supported coin.\n7. Return to the [Osmosis Assets](https://app.osmosis.zone/assets) page to withdraw your AKT to your Keplr wallet\n   This step withdraws AKT from the Osmosis platform back into your Keplr wallet.  You can now send AKT to Akashlytics.\n\nHave more questions? Find our team in [Discord](https://discord.com/invite/DxftX67) and [Telegram](https://t.me/AkashNW)\n\n# Deploying on Akash\n\nOnce you have setup your Keplr wallet and imported the address to Akashlytics you are ready to create your first deployment.  Follow the instructions in Akashlytics to create a certificate, then click on `Create Deployment`\n\nWhen prompted to `Choose Template` select `Empty` as we will copy-and-paste the deploy.yaml file from this repository.\nChoose `Empty` for the template and paste the `deploy.yaml` file from this repository adjusting your wallet address and pool variables.\n```\n---\nversion: \"2.0\"\n\nservices:\n  xmrig:\n    image: cryptoandcoffee/akash-xmrig:1\n    expose:\n      - port: 8080\n        as: 80\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - \"ADDRESS=4AbG74FRUHYXBLkvqM1f7QH3UXGkhLetKdxS7U7BHkyfMF4nfx99GvN1REwYQHAeVLLy4Qa5gXXkfS4pSHHUWwdVFifDo5K\"\n      - \"POOL=pool.hashvault.pro:80\"\n      - \"RANDOMX_MODE=auto\" #accepts auto-fast-light\n      - \"RANDOMX_1GB=true\"\n      - \"TLS=true\" #If supported by pool\n      - \"TLS_FINGERPRINT=420c7850e09b7c0bdcf748a7da9eb3647daf8515718f36d9ccfdd6b9ff834b14\" #Can be blank\nprofiles:\n  compute:\n    xmrig:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      pricing:\n        xmrig:\n          denom: uakt\n          amount: 2\ndeployment:\n  xmrig:\n    akash:\n      profile: xmrig\n      count: 1\n```\n\n# Choosing a provider\n\nAkash is a marketplace of compute.  Providers set their own prices for compute resources.  We recommend you try different providers and check your logs after deployment to determine the hashrate.\n\n![AkashlyticsBids](https://user-images.githubusercontent.com/19512127/142057801-5091473e-a9c3-4994-9e13-f1b1b1658491.png)\n\n# How to speed up mining?\n\n## Configure xmrig options\n\nThe Akash version of xmrig comes with variables that can be added or removed to the deploy.yaml file to further configure the miner.\n\nHere are all available variables:\n```\nPOOL=\nWALLET=\nPASSWORD=\nWORKER=\nTLS=\nTLS_FINGERPRINT=\nALGO=\nDONATE_LEVEL=\nRANDOMX_MODE=\nRANDOMX_1GB=\n```\n\n## Default pools\n\nThe default pools are [Hashvault](https://monero.hashvault.pro/en/dashboard) and [MoneroOcean](https://moneroocean.stream/), if you input either address in the `POOL=` variable, the program will ping the nearest location when deploying for optimal latency.\n\n## Changing the pool\n\nWe recommend you use Hashvault for a reliable pool, however if you need to change it feel free using the `POOL=` and configure `WALLET=` and `PASSWORD=`.\n\n## Disabling TLS\n\nIf your pool does not support TLS it can be disabled by setting `TLS=false` and `TLS_FINGERPRINT=` in the deploy.yaml file.\n\n## Increase the deployment size on Akash\n\nYou can deploy more CPU or more replicas to mine faster.\n\n\n```\ncpu:\n  units: 1.0 # Max cpu units is 10\n\n```\n\nOr increase the replica count from `count: 1` to `count: 2`.\n\n```\ndeployment:\n  xmrig:\n    akash:\n      profile: xmrig\n      count: 1 # Multiplier for cpu:units\n```\n\n\n### Check your miner's status\n\nJust enter your deployment URI at http://workers.xmrig.info\n\n### Check your miner's stats in the Hashvault pool\n\nEnter your Monero address to see the stats at https://monero.hashvault.pro/en/dashboard\n\n# Check your profitability\n\nAfter your deployment has finished tuning or is displaying results on the pool you can check your profitability by inputing your hashrate from the log file.\n\n[Minerstat profitability calculator](https://minerstat.com/coin/XMR)\n\n# What is the best pool? Where do I solo mine?\n\nWe recommend you check MiningPoolStats for the most up-to-date list of mining pools.\n\n[Mining Pool Stats](https://miningpoolstats.stream/monero)\n\n# Additional guides\n\n[How to mine Monero on Akash Network](https://nixaid.com/mine-monero-akash)\n","summary":"A no-fee latest version of xmrig.","deploy":"---\nversion: \"2.0\"\nservices:\n  xmrig:\n    image: cryptoandcoffee/akash-xmrig:1\n    expose:\n      - port: 8080\n        as: 80\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - \"ADDRESS=<XMR_WALLET>\"\n      - \"POOL=pool.hashvault.pro:80\"\n      - \"ALGO=rx/0\"\n      - \"WORKER=akash\"\n      - \"DONATE_LEVEL=0\"\n      - \"RANDOMX_MODE=fast\" #accepts auto-fast-light\n      - \"RANDOMX_1GB=true\"\n      - \"TLS=true\" #If supported by pool\n      - \"TLS_FINGERPRINT=420c7850e09b7c0bdcf748a7da9eb3647daf8515718f36d9ccfdd6b9ff834b14\" #Can be blank\nprofiles:\n  compute:\n    xmrig:\n      resources:\n        cpu:\n          units: 10.0\n        memory:\n          size: 2.5Gi #Requires at least 2.5Gi\n        storage:\n          size: 2Gi #Requires at least 2Gi\n  placement:\n    akash:\n      pricing:\n        xmrig:\n          denom: uakt\n          amount: 100\ndeployment:\n  xmrig:\n    akash:\n      profile: xmrig\n      count: 1 #max 2 count","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/monero","valuesToChange":[{"field":"env","initialValue":"<XMR_WALLET>"}]},{"name":"Chia","path":"chia","readme":"## Chia on Akash\n\n# Why use Akash?\n\nWelcome [Chia](https://www.chia.net/) community! We are excited to announce support for Chia on the [Akash](https://akash.network) network!  You can now run farmers and plotters on our marketplace of compute.  Below you will find details on how to configure your deployment for different use cases.  Akash is a part of the [Cosmos](https://cosmos.network/) ecosystem of blockchains.\n\n# Windows/Linux/Mac Users\n\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) wallet as a browser plugin\n2. Install [Akashlytics](https://akashlytics.com/deploy) and import your AKT wallet address from Keplr.\n3. [Fund your wallet](#Quickest-way-to-get-more-AKT)\n\nFor additional help we recommend you [follow our full deployment guide](https://docs.akash.network/guides/deploy) in parallel with this guide.\n\n# How does this work?\nAkash uses its blockchain to manage your container deployment and accounting.  To deploy on Akash you will need to fund your wallet with at least 10 AKT (~$20)  Each time you create a deployment, 5 AKT will be used for escrow and to fund the deployment.  If the deployment is canceled the balance of the escrow is returned to you.  You can spin up deployments without worrying about any long term contracts and you can cancel anytime.\n\n# Default wallet\nAkash uses [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) as the desktop wallet.  Advanced users can follow the [CLI instructions](https://docs.akash.network/guides/cli)\n\n# Quickest way to get more AKT\nTo fund your deployment you will need AKT in your account.  The fastest way to do that is as follows:\n\n## Buy on an Exchange\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Buy AKT on an [exchange](https://www.coingecko.com/en/coins/akash-network#markets)\n3. Withdraw your AKT to your Keplr wallet.\n\n## Swap from `ATOM` to `AKT`\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Send 10 ATOM to your new Cosmos wallet address (this address will start with `cosmos`)\n3. Goto https://app.osmosis.zone/assets > next to `Cosmos Hub - ATOM` click on `Deposit`\n4. Now go back to https://app.osmosis.zone/ and select `ATOM > AKT` to complete the swap\n5. Return to the https://app.osmosis.zone/assets page to withdraw your AKT to your Keplr wallet\n\nHave more questions? Find our team in [Discord](https://discord.com/invite/DxftX67) and [Telegram](https://t.me/AkashNW)\n\n# Deploying Chia Plotting on Akash\n\nOnce you have setup your Keplr wallet and imported the address to Akashlytics you are ready to create your first deployment.  Follow the instructions in Akashlytics to create a certificate, then click on `Create Deployment`\n\nWhen prompted to `Choose Template` select `Empty` as we will copy-and-paste the deploy.yaml file from this repository.\nChoose `Empty` for the template and paste the `deploy.yaml` file from this repository adjusting your wallet address and pool variables.\n```\n---\nversion: \"2.0\"\n\nservices:\n  chia:\n    image: cryptoandcoffee/akash-chia:12\n    expose:\n      - port: 8444\n        as: 8444\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - CONTRACT=\n      - FARMERKEY=\n      - REMOTE_HOST=changeme.com #SSH upload host\n      - REMOTE_LOCATION=changeme #SSH upload location like /root/plots\n      - REMOTE_PORT=22 #SSH upload port\n      - REMOTE_USER=changeme #SSH upload user\n      - REMOTE_PASS=changme #SSH upload password\n      - PLOTTER=madmax #Choose your plotter software - madmax/blade\nprofiles:\n  compute:\n    chia:\n      resources:\n        cpu:\n          units: 10.0\n        memory:\n          size: 6Gi\n#Chia blockchain is currently ~40gb as of November 2021 / if you are plotting please use at least 256Gi\n        storage:\n          size: 256Gi\n  placement:\n    akash:\n      pricing:\n        chia:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  chia:\n    akash:\n      profile: chia\n      count: 1\n```\n\n# Choosing a provider\n\nAkash is a marketplace of compute.  Providers set their own prices for compute resources.  We recommend you try different providers and check your logs after deployment.\n\n![AkashlyticsBids](https://user-images.githubusercontent.com/19512127/142057801-5091473e-a9c3-4994-9e13-f1b1b1658491.png)\n\n# How to speed up plotting?\n\n## Use only providers with the `chia-plotting` attribute\n\nTo limit the selection of providers to those with fast storage that meets the requirements for plotting, we recommend you add the `chia-plotting` attribute to the placement section of deploy.yaml file.\n\n```\nplacement:\n  akash:\n    attributes:\n      chia-plotting: \"true\"\n    pricing:\n      chia:\n        denom: uakt\n        amount: 25\n```\n\n## Increase the deployment size on Akash\n\nYou can deploy more than one instance of plotting.\n\n\n```\ncpu:\n  units: 1.0 # Max cpu units is 10\n\n```\n\nOr increase the replica count from `count: 1` to `count: 2`.\n\n```\ndeployment:\n  chia:\n    akash:\n      profile: chia\n      count: 1 # Multiplier for cpu:units\n```\n","summary":"Create Chia plots and upload over (SSH) to a remote host.","deploy":"---\nversion: \"2.0\"\nservices:\n  chia:\n    image: cryptoandcoffee/akash-chia:12\n    expose:\n      - port: 8444\n        as: 8444\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - CONTRACT=<CONTRACT>\n      - FARMERKEY=<FARMERKEY>\n      - REMOTE_HOST=<REMOTE_HOST> #SSH upload location\n      - REMOTE_PORT=<REMOTE_PORT> #SSH upload port\n      - REMOTE_USER=<REMOTE_USER> #SSH upload user\n      - REMOTE_PASS=<REMOTE_PASS> #SSH upload password\n      - REMOTE_LOCATION=<REMOTE_LOCATION> #SSH upload filepath\n      - PLOTTER=madmax #Choose your plotter software madmax or blade\nprofiles:\n  compute:\n    chia:\n      resources:\n        cpu:\n          units: 10.0\n        memory:\n          size: 6Gi\n#Chia blockchain is currently ~40gb as of November 2021 / if you are plotting please use at least 256Gi\n        storage:\n          size: 256Gi\n  placement:\n    akash:\n      pricing:\n        chia:\n          denom: uakt\n          amount: 100\ndeployment:\n  chia:\n    akash:\n      profile: chia\n      count: 1 #max 2 count","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/chia","valuesToChange":[{"field":"env","initialValue":"<CONTRACT>"},{"field":"env","initialValue":"<FARMERKEY>"},{"field":"env","initialValue":"<REMOTE_HOST>"},{"field":"env","initialValue":"<REMOTE_PORT>"},{"field":"env","initialValue":"<REMOTE_USER>"},{"field":"env","initialValue":"<REMOTE_LOCATION>"},{"field":"env","initialValue":"<REMOTE_PASS>"}]},{"name":"MoneroOcean / auto-switching CPU miner with XMR payout","path":"moneroocean","readme":"# Why use Akash?\n\nWelcome [MoneroOcean](https://moneroocean.stream/) and [Monero](https://getmonero.org) miners! This repository uses the default auto-switching installer from MoneroOcean, available [here](https://raw.githubusercontent.com/MoneroOcean/xmrig_setup/master/setup_moneroocean_miner.sh).  [Akash](https://akash.network) is a decentralized marketplace of compute with thousands of CPU's ready for small and large deployments.  MoneroOcean mining can be deployed on the network successfully using this guide.  Akash is a part of the [Cosmos](https://cosmos.network/) ecosystem of blockchains.\n\n# Windows/Linux/Mac Users\n\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) wallet as a browser plugin\n2. Install [Akashlytics](https://akashlytics.com/deploy) and import your AKT wallet address from Keplr.\n3. [Fund your wallet](https://github.com/ovrclk/awesome-akash/blob/master/moneroocean/#Quickest-way-to-get-more-AKT)\n\nFor additional help we recommend you [follow our full deployment guide](https://docs.akash.network/guides/deploy) in parallel with this guide.\n\n# How does this work?\nAkash uses its blockchain to manage your container deployment and accounting.  To deploy on Akash you will need to fund your wallet with at least 10 AKT (~$20)  Each time you create a deployment, 5 AKT will be used for escrow and to fund the deployment.  If the deployment is canceled the balance of the escrow is returned to you.  You can spin up deployments without worrying about any long term contracts and you can cancel anytime.\n\n# Default wallet\nAkash uses [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) as the desktop wallet.  Advanced users can follow the [CLI instructions](https://docs.akash.network/guides/cli)\n\n# Quickest way to get more AKT\nTo fund your deployment you will need AKT in your account.  The fastest way to do that is as follows:\n\n## Buy on an Exchange\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Buy AKT on an [exchange](https://www.coingecko.com/en/coins/akash-network#markets)\n3. Withdraw your AKT to your Keplr wallet.\n\n## Swap from `ATOM` to `AKT`\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Send 10 ATOM to your new Cosmos wallet address inside Keplr (this address will start with `cosmos`)\n3. Goto [Osmosis Assets](https://app.osmosis.zone/assets) > next to `Cosmos Hub - ATOM` click on `Deposit`\n   This step deposits ATOM from your Keplr wallet onto the Osmosis platform.\n5. Now go back to [Osmosis Homepage](https://app.osmosis.zone/assets) and select `ATOM > AKT` to complete the swap\n   This step swaps your ATOM you deposited onto the Osmosis platform into any other supported coin.\n7. Return to the [Osmosis Assets](https://app.osmosis.zone/assets) page to withdraw your AKT to your Keplr wallet\n   This step withdraws AKT from the Osmosis platform back into your Keplr wallet.  You can now send AKT to Akashlytics.\n\nHave more questions? Find our team in [Discord](https://discord.com/invite/DxftX67) and [Telegram](https://t.me/AkashNW)\n\n# Deploying on Akash\n\nOnce you have setup your Keplr wallet and imported the address to Akashlytics you are ready to create your first deployment.  Follow the instructions in Akashlytics to create a certificate, then click on `Create Deployment`\n\nWhen prompted to `Choose Template` select `Empty` as we will copy-and-paste the deploy.yaml file from this repository.\nChoose `Empty` for the template and paste the `deploy.yaml` file from this repository adjusting your wallet address and pool variables.\n```\n---\nversion: \"2.0\"\n\nservices:\n  xmrig:\n    image: cryptoandcoffee/akash-moneroocean:1\n    expose:\n      - port: 8080\n        as: 80\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - \"WALLET=4AbG74FRUHYXBLkvqM1f7QH3UXGkhLetKdxS7U7BHkyfMF4nfx99GvN1REwYQHAeVLLy4Qa5gXXkfS4pSHHUWwdVFifDo5K\"\nprofiles:\n  compute:\n    xmrig:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 256Mi\n  placement:\n    akash:\n      pricing:\n        xmrig:\n          denom: uakt\n          amount: 5\ndeployment:\n  xmrig:\n    akash:\n      profile: xmrig\n      count: 1\n```\n\n# Choosing a provider\n\nAkash is a marketplace of compute.  Providers set their own prices for compute resources.  We recommend you try different providers and check your logs after deployment to determine the hashrate.\n\n![AkashlyticsBids](https://user-images.githubusercontent.com/19512127/142057801-5091473e-a9c3-4994-9e13-f1b1b1658491.png)\n\n# Configure MoneroOcean options\n\nYou only need to configure your wallet address to use the MoneroOcean miner.  \n\nHere are all available variables:\n```\nWALLET=\n```\n\n# How to speed up mining?\n\n## Increase the deployment size on Akash\n\nYou can deploy more CPU or more replicas to mine faster.\n\n```\ncpu:\n  units: 1.0 # Max cpu units is 10\n\n```\n\nOr increase the replica count from `count: 1` to `count: 2`.\n\n```\ndeployment:\n  xmrig:\n    akash:\n      profile: xmrig\n      count: 1 # Multiplier for cpu:units\n```\n\n### Check your miner's status\n\nJust enter your deployment URI at http://workers.xmrig.info\n\n### Check your miner's stats in the MoneroOcean pool\n\nEnter your Monero address to see the stats at https://moneroocean.stream/\n\n# Check your profitability\n\nAfter your deployment has finished tuning or is displaying results on the pool you can check your profitability by inputing your hashrate from the log file.\n\n[Minerstat profitability calculator](https://minerstat.com/coin/XMR)\n\n# Additional guides\n\n[How to mine Monero on Akash Network](https://nixaid.com/mine-monero-akash)\n","summary":"Welcome MoneroOcean and Monero miners! This repository uses the default auto-switching installer from MoneroOcean, available here.  Akash is a decentralized marketplace of compute with thousands of...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  moneroocean:\n    image: cryptoandcoffee/akash-moneroocean:2\n    expose:\n      - port: 8080\n        as: 80\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - WALLET=4AbG74FRUHYXBLkvqM1f7QH3UXGkhLetKdxS7U7BHkyfMF4nfx99GvN1REwYQHAeVLLy4Qa5gXXkfS4pSHHUWwdVFifDo5K\nprofiles:\n  compute:\n    moneroocean:\n      resources:\n        cpu:\n          units: 4.0\n        memory:\n          size: 4Gi\n        storage:\n          size: 4Gi\nplacement:\n  akash:\n    pricing:\n      moneroocean:\n        denom: uakt\n        amount: 25\ndeployment:\n  moneroocean:\n    akash:\n      profile: moneroocean\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/moneroocean"},{"name":"Raptoreum","path":"raptoreum-miner","readme":"## How to mine Raptoreum (RTM) on Akash Network\n\n![AkashMiningRTM](https://user-images.githubusercontent.com/19512127/142097004-8c662e9a-e52a-4c36-a4dd-28b9b2bc3795.png)\n\n# Why use Akash?\n\nWelcome [Raptoreum](https://raptoreum.com/) miners! [Akash](https://akash.network) is a decentralized marketplace of compute with thousands of CPU's ready for small and large deployments.  Raptoreum mining can be deployed on the network successfully using this guide.  Akash is a part of the [Cosmos](https://cosmos.network/) ecosystem of blockchains.\n\n# Windows/Linux/Mac Users\n\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) wallet as a browser plugin\n2. Install [Akashlytics](https://akashlytics.com/deploy) and import your AKT wallet address from Keplr.\n3. [Fund your wallet](#Quickest-way-to-get-more-AKT)\n\nFor additional help we recommend you [follow our full deployment guide](https://docs.akash.network/guides/deploy) in parallel with this guide.\n\n# How does this work?\nAkash uses its blockchain to manage your container deployment and accounting.  To deploy on Akash you will need to fund your wallet with at least 10 AKT (~$20)  Each time you create a deployment, 5 AKT will be used for escrow and to fund the deployment.  If the deployment is cancelled the balance of the escrow is returned to you.  You can spin up deployments without worrying about any long term contracts and you can cancel anytime.\n\n# Default wallet\nAkash uses [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en) as the desktop wallet.  Advanced users can follow the [CLI instructions](https://docs.akash.network/guides/cli)\n\n# Quickest way to get more AKT\nTo fund your deployment you will need AKT in your account.  The fastest way to do that is as follows:\n\n## Buy on an Exchange\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Buy AKT on an [exchange](https://www.coingecko.com/en/coins/akash-network#markets)\n3. Withdraw your AKT to your Keplr wallet.\n\n## Swap from `ATOM` to `AKT`\n1. Install [Keplr](https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en)\n2. Send 10 ATOM to your new Cosmos wallet address inside Keplr (this address will start with `cosmos`)\n3. Goto [Osmosis Assets](https://app.osmosis.zone/assets) > next to `Cosmos Hub - ATOM` click on `Deposit`\n   This step deposits ATOM from your Keplr wallet onto the Osmosis platform.\n5. Now go back to [Osmosis Homepage](https://app.osmosis.zone/assets) and select `ATOM > AKT` to complete the swap\n   This step swaps your ATOM you deposited onto the Osmosis platform into any other supported coin.\n7. Return to the [Osmosis Assets](https://app.osmosis.zone/assets) page to withdraw your AKT to your Keplr wallet\n   This step withdraws AKT from the Osmosis platform back into your Keplr wallet.  You can now send AKT to Akashlytics.\n\nHave more questions? Find our team in [Discord](https://discord.com/invite/DxftX67) and [Telegram](https://t.me/AkashNW)\n\n# Deploying on Akash\n\nOnce you have setup your Keplr wallet and imported the address to Akashlytics you are ready to create your first deployment.  Follow the instructions in Akashlytics to create a certificate, then click on `Create Deployment`\n\nWhen prompted to `Choose Template` select `Empty` as we will copy-and-paste the deploy.yaml file from this repository.\nChoose `Empty` for the template and paste the `deploy.yaml` file from this repository adjusting your wallet address and pool variables.\n```\n---\nversion: \"2.0\"\n\nservices:\n  raptoreum:\n    image: cryptoandcoffee/cpu-akash-cpuminer-gr-avx2:2\n    expose:\n      - port: 4048\n        as: 80\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - \"ADDRESS=RMB251ZucvCNyX1yoQqsSC2wwJ3s7fHx3b\"\n      - \"POOL=suprnova\" #You can enter custom pool here, otherwise suprnova nearest location will be used\n      - \"WORKER=akash\"\n      - \"TUNE=no-tune\"\n      - \"DONATION=0\"\nprofiles:\n  compute:\n    raptoreum:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 256Mi\n        storage:\n          size: 128Mi\n  placement:\n    akash:\n      pricing:\n        raptoreum:\n          denom: uakt\n          amount: 2\n\ndeployment:\n  raptoreum:\n    akash:\n      profile: raptoreum\n      count: 1\n```\n\n# Choosing a provider\n\nAkash is a marketplace of compute.  Providers set their own prices for compute resources.  We recommend you try different providers and check your logs after deployment to determine the hashrate.\n\n![AkashlyticsBids](https://user-images.githubusercontent.com/19512127/142057801-5091473e-a9c3-4994-9e13-f1b1b1658491.png)\n\n# Not getting any bids?\n\nAkash providers bid in real-time on your deployment.  If the default of `amount: 2` UAKT is not producing any bids, consider adjusting it to something higher like `amount: 10` to get new bids from providers.\n\n# How to speed up mining?\n\n## Change the tuning option\n\n`TUNE=no-tune` variable in deploy.yaml to `TUNE=full-tune`\n\nNo tune will start mining right away - with no performance tuning of the container.  Without this expect a lower hashrate.\nBe warned, tuning can take at least 3 hours before mining begins - so do not expect to see hashrate on the pool immediately.\nYou can always check your logs in Akashlytics.\n\n## Increase the deployment size on Akash\n\nYou can deploy more CPU or more replicas to mine faster.\n\n\n```\ncpu:\n  units: 1.0 # Max cpu units is 10\n\n```\n\nOr increase the replica count from `count: 1` to `count: 2`.\n\n```\ndeployment:\n  raptoreum:\n    akash:\n      profile: raptoreum\n      count: 1 # Multiplier for cpu:units\n```\n\n# Check your profitability\n\nAfter your deployment has finished tuning or is displaying results on the pool you can check your profitability by inputing your hashrate from the log file.\n\n[Minerstat profitability calculator](https://minerstat.com/coin/RTM)\n\n# What is the best pool? Where do I solo mine?\n\nWe recommend you check MiningPoolStats for the most up-to-date list of mining pools.\n\n[Mining Pool Stats](https://miningpoolstats.stream/raptoreum)\n","deploy":"---\nversion: \"2.0\"\nservices:\n  raptoreum:\n    image: cryptoandcoffee/cpu-akash-cpuminer-gr-avx2:2\n    expose:\n      - port: 4048\n        as: 80\n        proto: tcp\n        to:\n          - global: true\n    env:\n      - \"ADDRESS=<RTM_WALLET>\"\n      - \"POOL=suprnova\"\n      - \"WORKER=akash\"\n      - \"TUNE=no-tune\"\n      - \"DONATION=0\"\nprofiles:\n  compute:\n    raptoreum:\n      resources:\n        cpu:\n          units: 10.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 256Mi\n  placement:\n    akash:\n      pricing:\n        raptoreum:\n          denom: uakt\n          amount: 100\ndeployment:\n  raptoreum:\n    akash:\n      profile: raptoreum\n      count: 1 #max 2 count","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/raptoreum-miner","valuesToChange":[{"field":"env","initialValue":"<RTM_WALLET>"}]},{"name":"PKT Miner","path":"pkt-miner","category":"Mining","summary":"A miner for PKT. Visit https://pkt.cash/ for more info.","githubUrl":"https://github.com/ovrclk/pkt-miner/blob/main/deploy.yaml","valuesToChange":[{"field":"env","initialValue":"<PKT_WALLET>"}],"deploy":"---\nversion: \"2.0\"\nservices:\n  miner:\n    image: cryptoandcoffee/akash-pkt-miner:1\n    env:\n      - WALLET_ADDR=<PKT_Wallet>\n      - POOL1=http://pool.srizbi.com \n      - POOL2=http://pool.pktpool.io\n# Enable only if connection issues with POOL1 and POOL2\n#     - POOL3=http://pool.pkt.world\n#     - POOL4=http://pool.pkteer.com\n#     - POOL5=http://pool.pktco.in\n    expose:\n      - port: 3000\n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    miner:\n      resources:\n        cpu:\n          units: 10\n        memory:\n          size: 512Mi\n        storage:\n          size: 256Mi\n  placement:\n    miner:\n      pricing:\n        miner:\n          denom: uakt\n          amount: 100\ndeployment:\n  miner:\n    miner:\n      profile: miner\n      count: 1 #max 2 count","readme":"# pkt.cash miner\n\nDeploy a https://pkt.cash miner on https://akash.network\n\n## Configuration\n\nEdit `deploy.yaml` so that it uses your wallet address and desired pool.\n\n## Running\n\nFollow the steps at https://docs.akash.network to deploy to the https://akash.network cloud.\n\n"}]},{"title":"Project Management","templates":[{"name":"Jira Software","path":"jira","readme":"# Jira Software\n\nFrom [the official Docker Hub image page](https://hub.docker.com/r/atlassian/jira-software):\n\nJira Software Data Center helps the world‚Äôs best agile teams plan, track, and release great software at scale.\n\n* Check out atlassian/jira-software on Docker Hub\n* Learn more about Jira Software: https://www.atlassian.com/software/jira\n\nThe `deploy.yaml` uses the official Docker image to deploy a basic configuration of Jira Software on Akash.\n\n","summary":"From the official Docker Hub image page:\n\nJira Software Data Center helps the world‚Äôs best agile teams plan, track, and release great software at scale.\n\nCheck out atlassian/jira-software on Docker...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  jira:\n    image: atlassian/jira-software:latest\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    jira:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        jira: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  jira:\n    akash:\n      profile: jira\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/jira"},{"name":"Redmine","path":"redmine","readme":"Redmine\n=======\n\n\nRedmine is a free and open source, web-based project management and issue tracking tool. It allows users to manage multiple projects and associated subprojects. It features per project wikis and forums, time tracking, and flexible role based access control. It includes a calendar and Gantt charts to aid visual representation of projects and their deadlines. Redmine integrates with various version control systems and includes a repository browser and diff viewer.\n\nAdmin login: admin  \nAdmin password: admin\n\n[Docker Official Image](https://hub.docker.com/_/redmine)\n\n","summary":"Redmine\n\nRedmine is a free and open source, web-based project management and issue tracking tool. It allows users to manage multiple projects and associated subprojects. It features per project wik...","deploy":"version: \"2.0\"\n\nservices:\n  db:\n    image: mysql:5.7\n    env:\n        - MYSQL_ROOT_PASSWORD=12345\n        - MYSQL_DATABASE=redmine\n    expose:\n      - port: 3306\n        as: 3306\n        to:\n          - service: db\n  \n  redmine:\n    image: redmine\n    depends-on:\n        - db\n    env:\n        - REDMINE_DB_MYSQL=db\n        - REDMINE_DB_USERNAME=root\n        - REDMINE_DB_PASSWORD=12345\n    expose:\n      - port: 3000\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    db:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n    \n    redmine:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n          \n  placement:\n    akash:    \n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        db: \n          denom: uakt\n          amount: 100\n        redmine: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  db:\n    akash:\n      profile: db\n      count: 1\n  redmine:\n    akash:\n      profile: redmine\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/redmine"},{"name":"Kanboard","path":"kanboard","readme":"# Kanboard\nFrom the official Docker image:\nhttps://docs.kanboard.org/en/latest/admin_guide/docker.html\n\nKanboard is a free and open source Kanban project management software.\n\n* Visualize your work\n* Limit your work in progress to focus on your goal\n* Drag and drop tasks to manage your project\n* Self-hosted\n* Super simple installation\n\nLearn more about Kanboard: https://kanboard.org\n\nThe deploy.yaml uses the official Docker image to deploy a basic configuration of Kanboard on Akash.","summary":"From the official Docker image:\nhttps://docs.kanboard.org/en/latest/admin_guide/docker.html\n\nKanboard is a free and open source Kanban project management software.\n\nVisualize your work\nLimit your w...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  kanboard:\n    image: kanboard/kanboard:v1.2.8\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    kanboard:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        kanboard: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  kanboard:\n    akash:\n      profile: kanboard\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/kanboard"}]},{"title":"Tools","templates":[{"name":"DEGO Stats","path":"dego-stats","readme":"# Dego-Stats\n\nA stats site for the decentralized NFT+DeFi project DEGO. The site shows the number of NFT crafted by each project and distribution of each NFT.\n","summary":"A stats site for the decentralized NFT+DeFi project DEGO. The site shows the number of NFT crafted by each project and distribution of each NFT.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  dego:\n    image: ericet/dego:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    dego:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        dego:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  dego:\n    akash:\n      profile: dego\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/dego-stats"},{"name":"authsteem","path":"authsteem","readme":"## authsteem\nauthsteem is a message board.\n","summary":"authsteem is a message board.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  authsteem:\n    image: steemfans/authsteem\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    authsteem:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        authsteem:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  authsteem:\n    akash:\n      profile: authsteem\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/authsteem"},{"name":"microbox","path":"microbox","readme":"## microbox\nmicrobox is Web clipboard\n","summary":"microbox is Web clipboard\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  redis:\n    image: microbox/redis\n    expose:\n      - port: 6379\n        as: 6379\n        to:\n          - service: redis\n  web:\n    image: ety001/online_clipboard:akash\n    env:\n      - \"DB_PORT_6379_TCP_ADDR=redis\"\n      - \"DB_PORT_6379_TCP_PORT=6379\"\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    web:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 128Mi\n    redis:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 128Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        web:\n          denom: uakt\n          amount: 100\n        redis:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  web:\n    akash:\n      profile: web\n      count: 1\n  redis:\n    akash:\n      profile: redis\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/microbox"},{"name":"Mintr","path":"mintr","readme":"# Mintr v2\n\nFrom [synthetix-mintr](https://github.com/Synthetixio/synthetix-mintr):\n\nThe dApp communicates with the Synthetix contracts, allowing users to perform the following actions:\n\nMint (aka Issue) sUSD by locking SNX\nClaim rewards of both SNX (inflation) and sUSD (exchange fees) every week\nBurn sUSD to unlock SNX\nTransfer SNX to other accounts\nDeposit (or withdrawl) sUSD into the Depot contract, to go in the queue for exchanging with ETH at current market price\nMintr v2 supports the following wallet providers:\n\nMetamask\nTrezor\nLedger\nCoinbase Wallet","summary":"From synthetix-mintr:\n\nThe dApp communicates with the Synthetix contracts, allowing users to perform the following actions:\n\nMint (aka Issue) sUSD by locking SNX\nClaim rewards of both SNX (inflatio...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  mintr:\n    image: yykpk0923/mintr:v2\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    mintr:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        mintr: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  mintr:\n    akash:\n      profile: mintr\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/mintr"},{"name":"Folding@home","path":"folding-at-home","readme":"Folding@home\n=======\n\nContribute towards disease research, by using spare processing capacity to perform calculations for the [Folding@home project][https://foldingathome.org/].\n\nDocker image from [yurinnick](https://github.com/yurinnick/folding-at-home-docker).\n\nBrowsing to the web interface to manage settings including Folding@home team and specifying the type of research you wish to support.\n","summary":"Folding@home\n\nContribute towards disease research, by using spare processing capacity to perform calculations for the Folding@home project.\n\nDocker image from yurinnick.\n\nBrowsing to the web interf...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  folding-at-home:\n    image: yurinnick/folding-at-home:latest\n    args:\n      - \"--allow=0/0\"\n      - \"--web-allow=0/0\"\n    env:\n      - \"TEAM=0\"\n      - \"ENABLE_GPU=false\"\n      - \"ENABLE_SMP=true\"\n    expose:\n      - port: 7396\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    folding-at-home:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        folding-at-home:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  folding-at-home:\n    akash:\n      profile: folding-at-home\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/folding-at-home"},{"name":"owncloud","path":"owncloud","readme":"ownCloud is a self-hosted file sync and share server. It provides access to your data through a web interface, sync clients or WebDAV while providing a platform to view, sync and share across devices easily‚Äîall under your control. ownCloud‚Äôs open architecture is extensible via a simple but powerful API for applications and plugins and it works with any storage.\n","summary":"ownCloud is a self-hosted file sync and share server. It provides access to your data through a web interface, sync clients or WebDAV while providing a platform to view, sync and share across devic...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  owncloud:\n    image: owncloud \n    expose:\n      - port: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    owncloud:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 1Gi\n        storage:\n          size: 2Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        owncloud: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  owncloud:\n    akash:\n      profile: owncloud\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/owncloud"},{"name":"Quill editor","path":"quill-editor","readme":"# Quill-editor\n\n\nQuill-editor is the WYSIWYG Quill Editor component.\n","summary":"Quill-editor is the WYSIWYG Quill Editor component.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  quill:\n    image: akashquill/quill:v1\n    expose:\n      - port: 8501\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    quill:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        quill:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  quill:\n    akash:\n      profile: quill\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/quill-editor"},{"name":"Periodic Table Creator","path":"Periodic-Table-Creator","readme":"# Periodic-Table-Creator\n\n Periodic Table of (80+) NLP Tasks, but had to update the table visualization continuously. So, as a side project, It made a Periodic Table Creator with Streamlit and Bokeh. You can load your own CSV data and it is possible to tune a lot of the layout.\n","summary":" Periodic Table of (80+) NLP Tasks, but had to update the table visualization continuously. So, as a side project, It made a Periodic Table Creator with Streamlit and Bokeh. You can load your own C...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  perio:\n    image: perioo/perio:v1\n    expose:\n      - port: 8501\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    perio:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        perio:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  perio:\n    akash:\n      profile: perio\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/Periodic-Table-Creator"},{"name":"dart-hello","path":"dart","readme":"\ngle/dart-hello is a docker image for a simple Dart HTTP server.\n\nIt is based on google/dart-runtime base image and listen on port 8080\n","summary":"\ngle/dart-hello is a docker image for a simple Dart HTTP server.\n\nIt is based on google/dart-runtime base image and listen on port 8080\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  dart:\n    image: google/dart-hello\n    expose:\n      - port: 8080\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    dart:\n      resources:\n        cpu:\n          units: 0.1\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        dart:\n          denom: uakt\n          amount: 100\n\ndeployment:\n  dart:\n    akash:\n      profile: dart\n      count: 1\n\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/dart"},{"name":"Matomo","path":"matomo","readme":"[Matomo](https://matomo.org) is an open source user analytics platform for websites and mobile apps. During the installtion process you will be asked for a Mysql database, user, and password. You can change those according to your needs in the deploy.yaml. \n","summary":"Matomo is an open source user analytics platform for websites and mobile apps. During the installtion process you will be asked for a Mysql database, user, and password. You can change those accord...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  db:\n    image: mysql:8.0.25\n    env:\n      - MYSQL_ROOT_PASSWORD=awdnadpwbdnaiosd\n      - MYSQL_DATABASE=matomo\n      - MYSQL_USER=matomo\n      - MYSQL_PASSWORD=mdabn9aodw908adsb9uoawd978asbi\n\n    expose:\n      - port: 3306\n        to:\n          - servcie: matomo\n  matomo:\n    image: matomo:apache\n    depends-on:\n        - db\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\n\nprofiles:\n  compute:\n    db:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n    matomo:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        db:\n          denom: uakt\n          amount: 100\n        matomo:\n          denom: uakt\n          amount: 100\ndeployment:\n  db:\n    akash:\n      profile: db\n      count: 1\n  matomo:\n    akash:\n      profile: matomo\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/matomo"},{"name":"Zammad","path":"zammad","readme":"# Zammad\r\nZammad is a web-based, open source user support/ticketing solution. <br>\r\nDocumentation: https://docs.zammad.org\r\n","summary":"Zammad\nZammad is a web-based, open source user support/ticketing solution.\nDocumentation: https://docs.zammad.org","deploy":"---\r\nversion: \"2.0\"\r\n\r\nservices:\r\n  zammad:\r\n    image: zammad/zammad:5.0.0-147\r\n    expose:\r\n      - port: 80\r\n        as: 80\r\n        to:\r\n          - global: true\r\n\r\nprofiles:\r\n  compute:\r\n    zammad:\r\n      resources:\r\n        cpu:\r\n          units: 1.0\r\n        memory:\r\n          size: 4Gi\r\n        storage:\r\n          size: 2Gi\r\n  placement:\r\n    akash:\r\n      attributes:\r\n        host: akash\r\n      signedBy:\r\n        anyOf:\r\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\r\n      pricing:\r\n        zammad: \r\n          denom: uakt\r\n          amount: 100\r\n\r\ndeployment:\r\n  zammad:\r\n    akash:\r\n      profile: zammad\r\n      count: 1\r\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/zammad"},{"name":"CodiMD","path":"CodiMD","readme":"# CodiMD\nCodiMD lets you collaborate in real-time with markdown. Built on HackMD source code, CodiMD lets you host and control your team's content with speed and ease.\n","summary":"CodiMD lets you collaborate in real-time with markdown. Built on HackMD source code, CodiMD lets you host and control your team's content with speed and ease.\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  db:\n    image: postgres:11.6-alpine\n    env:\n      - POSTGRES_USER=codimd\n      - POSTGRES_PASSWORD=change_password\n      - POSTGRES_DB=codimd\n    expose:\n        - port: 3306\n          as: 3306\n        to: \n            - service: db\n  codimd:\n    image: hackmdio/hackmd:2.4.1\n    env:\n      - CMD_DB_URL=postgres://codimd:change_password@database/codimd\n      - CMD_USECDN=false\n    depends-on:\n      - db\n    expose: \n        - port: 3000\n          as: 3000\n        to:\n            - global: true\n\nprofiles:\n  compute:\n      db:\n        resources:\n          cpu:\n            units: 0.5\n        memory:\n            size: 512Mi\n        storage:\n            size: 512Mi\n    codimd:\n      resources:\n        cpu:\n          units: 0.5\n        memory:\n          size: 512Mi\n        storage:\n          size: 1Gi\n  placement:\n    westcoast:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n          db:\n            denom: uakt\n          amount: 5000\n        codimd: \n          denom: uakt\n          amount: 5000\n\ndeployment:\n   db:\n      westcoast: \n        profile: db\n        count: 1\n  codimd:\n    westcoast:\n      profile: codimd\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/CodiMD"},{"name":"KnowYourDeFi","path":"knowyourdefi","readme":"# KnowYourDeFi\nFrom the official Docker image:\nhttps://hub.docker.com/repository/docker/minatofund/knowyourdefi\n\nKnow Your DeFi is a strategy and data platform for Decentralized Finance, providing a concise and intuitive data query interface that allows users to understand the DeFi projects they are interested in and adjust their strategies based on visual risk alerts. \n\nKnow Your DeFi selects more reliable data sources, subgraphs from The Graph, to add strategy descriptions and risk tips to some of the data modules based on professional research findings, and to visualize the most critical risk tips. In this way, the value of the data to the user will be maximized. It helps users to better understand more projects in the DeFi ecosystem, and provides a super awesome use case of subgraphs.\n\nThe deploy.yaml uses the latest Docker image to deploy Know Your DeFi Dapp on Akash.","summary":"From the official Docker image:\nhttps://hub.docker.com/repository/docker/minatofund/knowyourdefi\n\nKnow Your DeFi is a strategy and data platform for Decentralized Finance, providing a concise and i...","deploy":"---\nversion: \"2.0\"\n\nservices:\n  knowyourdefi:\n    image: minatofund/knowyourdefi:latest\n    expose:\n      - port: 80\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    knowyourdefi:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 512Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        knowyourdefi: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  knowyourdefi:\n    akash:\n      profile: knowyourdefi\n      count: 1 \n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/knowyourdefi"},{"name":"Code-Server","path":"code-server","readme":"# Akash Code-Server\n\nLaunch a [Code-Server](https://coder.com/) server on the Akash blockchain. Run VS Code on any machine anywhere and access it in the browser.  Visit the [code-server](https://github.com/cdr/code-server) github repo to learn more.\n\n\n\n## Requirements\n\nLinux machine with WebSockets enabled, 1 GB RAM, and 2 CPUs. \n## Environment Variables\n\nInformation about the Environment Variables for this docker image can be found in the [linuxserver/docker-code-server](https://github.com/linuxserver/docker-code-server) github repo.\n### Required Variables\n\n```yaml\n  - PUID=1000\n  - PGID=1000\n  - PASSWORD=password \n  - SUDO_PASSWORD=password\n```\n\n### Optional Variables\n\n```yaml\n  - TZ=Europe/London\n  - HASHED_PASSWORD= #optional\n  - SUDO_PASSWORD_HASH= #optional\n  - PROXY_DOMAIN=code-server.my.domain #optional\n```","summary":"Launch a Code-Server server on the Akash blockchain. Run VS Code on any machine anywhere and access it in the browser.  Visit the code-server github repo to learn more.\n\nRequirements\n\nLinux machine...","deploy":"version: '2.0'\nservices:\n  codeserver:\n    image: ghcr.io/linuxserver/code-server\n    env:\n      - PUID=1000\n      - PGID=1000\n      - PASSWORD=password \n      - SUDO_PASSWORD=password\n\n    expose:\n      - port: 8443\n        as: 80\n        to:\n          - global: true\nprofiles:\n  compute:\n    codeserver:\n      resources:\n        cpu:\n          units: 2.0\n        memory:\n          size: 4Gi\n        storage:\n          size: 1Gi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        codeserver:\n          denom: uakt\n          amount: 100\ndeployment:\n  codeserver:\n    akash:\n      profile: codeserver\n      count: 1\n\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/code-server"}]},{"title":"Wallet","templates":[{"name":"tronwallet","path":"tronwallet","readme":"## Tronwallet\nA tronwallet make with streamlit -- Deploy on akash decloud \n\n\nsee more:https://steemit.com/hive-180932/@maiyude/akash-streamlit-tron \n\nhttp://69psvqo6npcjt8c056d44omnlo.provider2.akashdev.net/\n","summary":"A tronwallet make with streamlit -- Deploy on akash decloud\n\nsee more:https://steemit.com/hive-180932/@maiyude/akash-streamlit-tron\n\nhttp://69psvqo6npcjt8c056d44omnlo.provider2.akashdev.net/\n","deploy":"---\nversion: \"2.0\"\n\nservices:\n  tronwallet:\n    image: maiyude/tronmoney:v1\n    expose:\n      - port: 8501\n        as: 80\n        to:\n          - global: true\n\nprofiles:\n  compute:\n    tronwallet:\n      resources:\n        cpu:\n          units: 1.0\n        memory:\n          size: 512Mi\n        storage:\n          size: 1500Mi\n  placement:\n    akash:\n      attributes:\n        host: akash\n      signedBy:\n        anyOf:\n          - \"akash1365yvmc4s7awdyj3n2sav7xfx76adc6dnmlx63\"\n      pricing:\n        tronwallet: \n          denom: uakt\n          amount: 100\n\ndeployment:\n  tronwallet:\n    akash:\n      profile: tronwallet\n      count: 1\n","guide":null,"githubUrl":"https://github.com/ovrclk/awesome-akash/blob/master/tronwallet"}]}]